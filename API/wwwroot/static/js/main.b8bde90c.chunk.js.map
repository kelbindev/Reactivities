{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profilesStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/Navbar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/MyTextArea.tsx","app/common/MySelectInput.tsx","app/common/MyDateInput.tsx","app/common/options/CategoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailContent.tsx","features/activities/details/ActivityDetailSidebar.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/ImageUpload/PhotoUploadWidgetDropZone.tsx","app/common/ImageUpload/PhotoUploadCropper.tsx","app/common/ImageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileAbout.tsx","features/profiles/profileFollowings.tsx","features/profiles/ProfileActivityCard.tsx","features/profiles/ProfileEventActivities.tsx","features/profiles/ProfileEvent.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","responseBody","response","request","url","get","then","body","post","put","delete","interceptors","use","config","token","store","commonStore","headers","Authorization","a","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateAbout","profile","updateFollowing","listFollowing","predicate","getProfileActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ProfileAbouts","bio","following","followingCount","followersCount","ActivityStore","activityRegistry","Map","selectedActivity","isEditMode","isSubmitting","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","val","loadAcitivites","setLoading","axiosParams","result","e","setActivity","setPagination","loadActivity","getActivity","runInAction","createActivity","userStore","attendee","uuid","newActivity","hostUsername","attendees","updateActivity","updatedActivity","deleteActivity","updateAttendance","isGoing","filter","x","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","at","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activities","reduce","_activities","_activity","format","loading","isEdit","some","isHost","host","find","Date","UserStore","creds","setToken","modalStore","closeModal","logout","localStorage","removeItem","getCurrentUser","setImage","ProfileStore","loadingProfile","uploading","followings","loadingFollowing","activeTab","activeEventTab","setActiveTab","tabIndex","setActiveEventTab","loadProfile","photo","photos","isMain","photoId","activityStore","loadFollowings","clearFollowings","clearProfileActivities","loadProfileEvents","getItem","appLoaded","window","setItem","setAppLoaded","modal","open","openModal","content","profileStore","commentStore","comment","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comments","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","header","exact","as","NavLink","to","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","disabled","preventDefault","handleFollow","truncate","str","n","length","substr","Card","Header","Description","extra","Icon","Divider","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityItemList","Segment","Group","Label","attached","textAlign","secondary","clearing","floated","groupedActivities","group","groupVal","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","ActivityFilter","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","setSubmitting","finally","handleSubmit","className","autoComplete","placeholder","type","render","marginBottom","ValidationError","Message","err","i","validationSchema","Yup","required","isValid","dirty","LoadingComponent","Dimmer","MyTextArea","rows","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","CategoryOptions","useHistory","useParams","nullable","handleCancel","enableReinitialize","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","relaxed","divided","Extra","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","resetForm","onKeyPress","shiftKey","TestErrors","setError","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","PhotoUploadWidgetDropZone","setFiles","dzStyle","borderRadius","paddingTop","onDrop","useCallback","files","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","uploadPhotoHandler","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleSetDeletephoto","editMode","setEditMode","abouts","about","ProfileEvent","panes","menuItem","menu","onTabChange","activeIndex","ProfileContent","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","hideProgressBar","path","HomePage","LoginForm","ActivityDashboard","ActivityDetails","TestError","ActivityForm","ServerError","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"0XAOaA,EAIT,WAAYC,EAASC,GAAwB,yBAH7CD,UAG4C,OAF5CC,gBAE4C,EACxCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA0C,IAA9BC,EAA6B,uDAAhB,EAAGC,EAAa,uDAAF,EAAE,yBAHzCD,WAAa,EAG4B,KAFzCC,SAAW,EAGPH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCbxBC,IAAMC,SAASC,QAAUC,OAEzB,IAAMC,EAAe,SAAIC,GAAJ,OAAmCA,EAASX,MAE3DY,EACG,SAAIC,GAAJ,OAAoBP,IAAMQ,IAAOD,GAAKE,KAAKL,IAD9CE,EAEI,SAAIC,EAAaG,GAAjB,OAA8BV,IAAMW,KAAQJ,EAAIG,GAAMD,KAAKL,IAF/DE,EAGG,SAAIC,EAAaG,GAAjB,OAA8BV,IAAMY,IAAOL,EAAIG,GAAMD,KAAKL,IAH7DE,EAIG,SAAIC,GAAJ,OAAoBP,IAAMa,OAAUN,GAAKE,KAAKL,IASvDJ,IAAMc,aAAaR,QAAQS,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXhB,IAAMc,aAAaT,SAASU,IAA5B,+BAAAO,EAAA,MACI,WAAMjB,GAAN,eAAAiB,EAAA,2DACU3B,EAAaU,EAASe,QAAT,YADvB,uBAGQf,EAASX,KAAO,IAAID,EAAgBY,EAASX,KAAK6B,KAAKC,MAAM7B,IAHrE,kBAIeU,GAJf,gCAMWA,GANX,2CADJ,uDAQO,SAACoB,GACA,MAAiCA,EAAMpB,SAA/BX,EAAR,EAAQA,KAAMgC,EAAd,EAAcA,OAAQV,EAAtB,EAAsBA,OAEtB,OADAW,QAAQC,IAAI,oBACJF,GACJ,KAAK,IAQD,GAPoB,kBAAThC,GACPmC,IAAMJ,MAAM/B,GAEM,QAAlBsB,EAAOc,QAAoBpC,EAAKqC,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEjBP,QAAQC,IAAIlC,GACRA,EAAKqC,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAO1C,EAAKqC,OACfrC,EAAKqC,OAAOK,IACZD,EAAiBD,KAAKxC,EAAKqC,OAAOK,IAG1C,MAAMD,EAAiBE,OAGvBR,IAAMJ,MAAM/B,GAGhB,MACJ,KAAK,IACDmC,IAAMJ,MAAM,gBACZ,MACJ,KAAK,IACDQ,GAAQC,KAAK,aACb,MACJ,KAAK,IACDhB,EAAMC,YAAYmB,eAAe5C,GACjCuC,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOf,MAI9B,IAuCegB,EAND,CACVC,WAlCe,CACnBC,KAAM,SAACC,GAAD,OAA6B5C,IAAMQ,IAAiC,cAAc,CAACoC,WAASnC,KAAKL,IACnGyC,QAAS,SAACC,GAAD,OAAgBxC,EAAA,sBAAqCwC,KAC9DC,OAAQ,SAACC,GAAD,OAAkC1C,EAAmB,eAAgB0C,IAC7EC,OAAQ,SAACD,GAAD,OAAkC1C,EAAA,sBAAiC0C,EAASF,IAAME,IAC1FnC,OAAQ,SAACiC,GAAD,OAAgBxC,EAAA,sBAAiCwC,KACzDI,OAAQ,SAACJ,GAAD,OAAexC,EAAA,sBAAkCwC,EAAlC,WAA8C,MA6BrEK,QA1BY,CACZC,QAAS,kBAAM9C,EAAkB,aACjC+C,MAAO,SAACC,GAAD,OAA0BhD,EAAmB,iBAAiBgD,IACrEC,SAAU,SAACD,GAAD,OAA0BhD,EAAmB,oBAAoBgD,KAwB3EE,SArBa,CACbhD,IAAK,SAACiD,GAAD,OAAoBnD,EAAA,oBAAkCmD,KAC3DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAOH,GAChB3D,IAAMW,KAAY,QAASiD,EAAU,CACxCxC,QAAS,CAAC,eAAgB,0BAGlC2C,aAAc,SAACjB,GAAD,OAAgBxC,EAAA,iBAAuBwC,EAAvB,YAAoC,KAClEkB,YAAa,SAAClB,GAAD,OAAgBxC,EAAA,iBAAsBwC,KACnDmB,YAAa,SAACC,GAAD,OAAsB5D,EAAA,wBAA2C4D,IAC9EC,gBAAiB,SAACV,GAAD,OAAqBnD,EAAA,kBAA8BmD,GAAW,KAC/EW,cAAe,SAACX,EAAiBY,GAAlB,OAAuC/D,EAAA,kBAAkCmD,EAAlC,sBAAwDY,KAC9GC,qBAAsB,SAACb,EAAiBY,GAAlB,OAClB/D,EAAA,oBAA4CmD,EAA5C,iCAA6EY,OC9FxEE,EACX,WAAYC,GAA4B,oBACtCC,OAAOC,OAAO9E,KAAM4E,IAIXG,EASX,WAAY3B,GAAgC,yBAR5CF,QAAc8B,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGVlC,IACFpD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAKiF,MAAQ7B,EAAS6B,MACtBjF,KAAKkF,SAAW9B,EAAS8B,SACzBlF,KAAKmF,YAAc/B,EAAS+B,YAC5BnF,KAAKoF,KAAOhC,EAASgC,KACrBpF,KAAKqF,KAAOjC,EAASiC,KACrBrF,KAAKsF,MAAQlC,EAASkC,Q,kBC5BfC,EACT,WAAY7B,GAAY,oBACpB1D,KAAK6D,SAAWH,EAAKG,SACrB7D,KAAKwF,YAAc9B,EAAK8B,YACxBxF,KAAKyF,MAAQ/B,EAAK+B,OAWbC,EAQT,WAAYpB,GAAkB,yBAP9BT,SAAmB,GAOU,KAN7B2B,YAAsB,GAMO,KAL7BG,SAK6B,OAJ7BC,WAAqB,EAIQ,KAH7BC,eAAyB,EAGI,KAF7BC,eAAyB,EAGjBxB,IACAtE,KAAK6D,SAAWS,EAAQT,SACxB7D,KAAKwF,YAAclB,EAAQkB,YAC3BxF,KAAK2F,IAAMrB,EAAQqB,IACnB3F,KAAK4F,UAAYtB,EAAQsB,UACzB5F,KAAK8F,eAAiBxB,EAAQwB,eAC9B9F,KAAK6F,eAAiBvB,EAAQuB,iBClCrBE,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyClB,EAQ3B,KAPdmB,YAAsB,EAOR,KANdC,cAAwB,EAMV,KALdC,gBAA0B,EAKZ,KAJdtG,WAAgC,KAIlB,KAHduG,aAAe,IAAIrG,EAGL,KAFdwE,WAAY,IAAIwB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAChC,EAAmBiC,GAC/B,IAAMC,EAAiB,WACnB,EAAKlC,UAAUmC,SAAQ,SAACC,EAAKrE,GACb,cAARA,GAAuB,EAAKiC,UAAUxD,OAAOuB,OAIzD,OAAQiC,GACJ,IAAK,MACDkC,IACA,EAAKlC,UAAU8B,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAKlC,UAAU8B,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAKlC,UAAU8B,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAK9B,UAAUxD,OAAO,aACtB,EAAKwD,UAAU8B,IAAI,YAAaG,KAvC9B,KAmFdI,eAnFc,sBAmFG,4BAAApF,EAAA,6DACb,EAAKqF,YAAW,GADH,kBAIYlE,EAAMC,WAAWC,KAAK,EAAKiE,aAJvC,QAIHC,EAJG,QAMFnH,KAAK8G,SAAQ,SAAAM,GAChB,EAAKC,YAAYD,MAErB,EAAKE,cAAcH,EAAOlH,YAC1B,EAAKgH,YAAW,GAVP,kDAcThF,QAAQC,IAAR,MAEA,EAAK+E,YAAW,GAhBP,0DAnFH,KAuGdK,cAAgB,SAACrH,GACb,EAAKA,WAAaA,GAxGR,KA2GdsH,aA3Gc,uCA2GC,WAAOnE,GAAP,eAAAxB,EAAA,2DACP0B,EAAW,EAAKkE,YAAYpE,IADrB,uBAGP,EAAKgD,iBAAmB9C,EAHjB,kBAIAA,GAJA,cAMP,EAAKiD,gBAAiB,EANf,mBAQqBxD,EAAMC,WAAWG,QAAQC,GAR9C,eAQHE,EARG,OASH,EAAK+D,YAAY/D,GACjBmE,aAAY,WACR,EAAKrB,iBAAmB9C,KAG5B,EAAK2D,YAAW,GAdb,kBAeI3D,GAfJ,kCAkBHrB,QAAQC,IAAR,MACA,EAAK+E,YAAW,GAnBb,0DA3GD,2DAmJdS,eAnJc,uCAmJG,WAAOpE,GAAP,mBAAA1B,EAAA,6DACPgC,EAAOpC,EAAMmG,UAAU/D,KACvBgE,EAAW,IAAInC,EAAQ7B,GAFhB,SAITN,EAASF,GAAKyE,cAJL,SAKH9E,EAAMC,WAAWK,OAAOC,GALrB,QAMLwE,EAAc,IAAIjD,EAASvB,IACnByE,aAAZ,OAA2BnE,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMG,SACjC+D,EAAYE,UAAY,CAACJ,GACzB,EAAKP,YAAYS,GACjBL,aAAY,WACR,EAAKrB,iBAAmB0B,KAXnB,kDAeT7F,QAAQC,IAAR,MAfS,0DAnJH,2DAsKd+F,eAtKc,uCAsKG,WAAO3E,GAAP,SAAA1B,EAAA,+EAEHmB,EAAMC,WAAWO,OAAOD,GAFrB,OAGTmE,aAAY,WACR,GAAInE,EAASF,GAAI,CACb,IAAI8E,EAAe,2BAAQ,EAAKV,YAAYlE,EAASF,KAAQE,GAC7D,EAAK4C,iBAAiBO,IAAInD,EAASF,GAAI8E,GACvC,EAAK9B,iBAAmB8B,MAPvB,gDAYTjG,QAAQC,IAAR,MACAuF,aAAY,WACR,EAAKnB,cAAe,KAdf,yDAtKH,2DAyLd6B,eAzLc,uCAyLG,WAAO/E,GAAP,SAAAxB,EAAA,6DACb,EAAK0E,cAAe,EADP,kBAGHvD,EAAMC,WAAW7B,OAAOiC,GAHrB,OAKT,EAAK8C,iBAAiB/E,OAAOiC,GAC7BqE,aAAY,WACR,EAAKnB,cAAe,KAPf,gDAWTrE,QAAQC,IAAR,MACAuF,aAAY,WACR,EAAKnB,cAAe,KAbf,yDAzLH,2DA2Md8B,iBA3Mc,sBA2MK,4BAAAxG,EAAA,6DACXgC,EAAOpC,EAAMmG,UAAU/D,KAC3B,EAAK0C,cAAe,EAFL,kBAKLvD,EAAMC,WAAWQ,OAAO,EAAK4C,iBAAkBhD,IAL1C,OAMXqE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBiC,QAAS,CAAC,IAAD,IAChC,EAAKjC,iBAAkB4B,UAAvB,UACI,EAAK5B,wBADT,iBACI,EAAuB4B,iBAD3B,aACI,EAAkCM,QAAO,SAAAC,GAAC,OAAIA,EAAExE,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACvE,EAAKqC,iBAAiBiC,SAAU,MAE/B,CAAC,IAAD,IACKT,EAAW,IAAInC,EAAQ7B,GAC7B,YAAKwC,wBAAL,mBAAuB4B,iBAAvB,SAAkCxF,KAAKoF,GACvC,EAAKxB,iBAAkBiC,SAAU,EAGrC,EAAKnC,iBAAiBO,IAAI,EAAKL,iBAAkBhD,GAAI,EAAKgD,qBAlBnD,gDAqBXnE,QAAQC,IAAR,MArBW,yBAuBX,EAAKoE,cAAe,EAvBT,4EA3ML,KAuOdkC,qBAvOc,sBAuOS,sBAAA5G,EAAA,6DACnB,EAAK0E,cAAe,EADD,kBAGTvD,EAAMC,WAAWQ,OAAO,EAAK4C,iBAAkBhD,IAHtC,OAIfqE,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkBqC,cAAc,UAAC,EAAKrC,wBAAN,aAAC,EAAuBqC,aAC7D,EAAKvC,iBAAiBO,IAAI,EAAKL,iBAAkBhD,GAAI,EAAKgD,qBAN/C,sEAafqB,aAAY,kBAAM,EAAKnB,cAAe,KAbvB,0EAvOT,KAwPdoC,sBAAwB,WACpB,EAAKtC,sBAAmBlB,GAzPd,KA4PdyD,wBAA0B,SAAC5E,GACvB,EAAKmC,iBAAiBY,SAAQ,SAAAM,GAC1BA,EAAEY,UAAUlB,SAAQ,SAAA8B,GACZA,EAAG7E,WAAaA,IAChB6E,EAAG9C,UAAY8C,EAAG5C,iBAAmB4C,EAAG5C,iBACxC4C,EAAG9C,WAAa8C,EAAG9C,kBAhQ/B+C,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKnE,UAAUoE,UACrB,WACI,EAAKvC,aAAe,IAAIrG,EACxB,EAAK+F,iBAAiB8C,QACtB,EAAKhC,oB,6CAoCjB,WACI,IAAM9D,EAAS,IAAI+F,gBAYnB,OAXA/F,EAAOkB,OAAO,aAAclE,KAAKsG,aAAapG,WAAW8I,YACzDhG,EAAOkB,OAAO,WAAYlE,KAAKsG,aAAanG,SAAS6I,YAErDhJ,KAAKyE,UAAUmC,SAAQ,SAACC,EAAKrE,GACb,cAARA,EACAQ,EAAOkB,OAAO1B,EAAMqE,EAAaoC,eAEjCjG,EAAOkB,OAAO1B,EAAKqE,MAIpB7D,I,sBAGX,WACI,OAAOkG,MAAMC,KAAKnJ,KAAKgG,iBAAiBoD,UAAUC,MAAK,SAAC3H,EAAG4H,GAAJ,OACnD5H,EAAE0D,KAAMmE,UAAYD,EAAElE,KAAMmE,e,6BAGpC,WACI,OAAO1E,OAAO2E,QACVxJ,KAAKyJ,WAAWC,QAAO,SAACC,EAAaC,GACjC,IAAMxE,EAAOyE,kBAAOD,EAAUxE,KAAO,eAErC,OADAuE,EAAYvE,GAAQuE,EAAYvE,GAAZ,sBAAwBuE,EAAYvE,IAApC,CAA2CwE,IAAa,CAACA,GACtED,IACR,O,wBAIX,SAAWG,GACP9J,KAAKqG,eAAiByD,I,yBAG1B,SAAYC,GACR/J,KAAKmG,WAAa4D,I,yBAmDtB,SAAoB7G,GAChB,OAAOlD,KAAKgG,iBAAiBpF,IAAIsC,K,yBAGrC,SAAoBE,GAChB,IACU,IADNM,EAAOpC,EAAMmG,UAAU/D,KACvBA,IACAN,EAAS+E,QAAT,UAAmB/E,EAAS0E,iBAA5B,aAAmB,EAAoBkC,MAAK,SAAA3B,GAAC,OAAIA,EAAExE,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACtET,EAAS6G,OAAS7G,EAASyE,eAAiBnE,EAAKG,SACjDT,EAAS8G,KAAT,UAAgB9G,EAAS0E,iBAAzB,aAAgB,EAAoBqC,MAAK,SAAA9B,GAAC,OAAIA,EAAExE,WAAaT,EAASyE,iBAG1EzE,EAASgC,KAAO,IAAIgF,KAAKhH,EAASgC,MAClCpF,KAAKgG,iBAAiBO,IAAInD,EAASF,GAAIE,O,KC7J1BiH,E,WAGjB,aAAe,IAAD,gCAFd3G,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAO6G,GAAP,eAAA5I,EAAA,+EAGqBmB,EAAMU,QAAQE,MAAM6G,GAHzC,OAGMrD,EAHN,OAIA3F,EAAMC,YAAYgJ,SAAStD,EAAO5F,OAClCkG,aAAY,kBAAM,EAAK7D,KAAOuD,KAC9B5E,GAAQC,KAAK,eACbhB,EAAMkJ,WAAWC,aAPjB,uHARM,2DAsBdC,OAAS,WACLpJ,EAAMC,YAAYF,MAAQ,KAC1B,EAAKqC,KAAO,KACZiH,aAAaC,WAAW,OACxBvI,GAAQC,KAAK,MA1BH,KA6BduI,eA7Bc,sBA6BG,4BAAAnJ,EAAA,+EAEYmB,EAAMU,QAAQC,UAF1B,OAEHyD,EAFG,OAGTM,aAAY,WAAM,EAAK7D,KAAOuD,KAHrB,gDAKTlF,QAAQC,IAAR,MALS,yDA7BH,KAuCd2B,SAvCc,uCAuCH,WAAO2G,GAAP,eAAA5I,EAAA,+EAEkBmB,EAAMU,QAAQI,SAAS2G,GAFzC,OAEGrD,EAFH,OAGH3F,EAAMC,YAAYgJ,SAAStD,EAAO5F,OAClCkG,aAAY,kBAAM,EAAK7D,KAAOuD,KAC9B5E,GAAQC,KAAK,eACbhB,EAAMkJ,WAAWC,aANd,uHAvCG,2DAmDdK,SAAW,SAACrF,GACJ,EAAK/B,OAAM,EAAKA,KAAK+B,MAAQA,IAnDjCkD,YAAmB3I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCRDqH,E,WAYjB,aAAe,IAAD,gCAXdzG,QAA0B,KAWZ,KAVd0G,gBAAiB,EAUH,KATdC,WAAY,EASE,KARdnB,SAAU,EAQI,KAPdoB,WAAwB,GAOV,KANdzB,WAAgC,GAMlB,KALd0B,kBAA4B,EAKd,KAJdC,UAAmB,EAIL,KAFdC,eAAwB,EAEV,KAuDdC,aAAe,SAACC,GACZ,EAAKH,UAAYG,GAxDP,KA2DdC,kBAAoB,SAACD,GACjB,EAAKF,eAAiBE,GA5DZ,KAuEdE,YAvEc,uCAuEA,WAAO5H,GAAP,eAAAnC,EAAA,6DACV,EAAKsJ,gBAAiB,EADZ,kBAGgBnI,EAAMe,SAAShD,IAAIiD,GAHnC,OAGAS,EAHA,OAIN,EAAKA,QAAUA,EAJT,gDAONvC,QAAQC,IAAR,MAPM,yBAUNuF,aAAY,kBAAM,EAAKyD,gBAAiB,KAVlC,4EAvEA,2DAqFdlH,YArFc,uCAqFA,WAAOC,GAAP,iBAAArC,EAAA,6DACV,EAAKuJ,WAAY,EADP,kBAGiBpI,EAAMe,SAASE,YAAYC,GAH5C,OAGAtD,EAHA,OAIAiL,EAAQjL,EAASX,KACvByH,aAAY,WACW,IAAD,EAAd,EAAKjD,UACL,YAAKA,QAAQqH,cAAb,SAAqBrJ,KAAKoJ,GACtBA,EAAME,QAAUtK,EAAMmG,UAAU/D,OAChCpC,EAAMmG,UAAUqD,SAASY,EAAM/K,KAC/B,EAAK2D,QAAQmB,MAAQiG,EAAM/K,SAVjC,gDAgBNoB,QAAQC,IAAR,MAhBM,yBAkBNuF,aACI,kBAAM,EAAK0D,WAAY,KAnBrB,4EArFA,2DA6Gd9G,aA7Gc,uCA6GC,WAAOuH,GAAP,SAAAhK,EAAA,6DACX,EAAKoI,SAAU,EADJ,kBAGDjH,EAAMe,SAASO,aAAauH,EAAMxI,IAHjC,OAIP5B,EAAMmG,UAAUqD,SAASY,EAAM/K,KAC/B4G,aAAY,WACJ,EAAKjD,SAAW,EAAKA,QAAQqH,SAC7B,EAAKrH,QAAQqH,OAAOxB,MAAK,SAAA9B,GAAC,OAAiB,IAAbA,EAAEuD,UAAkBA,QAAS,EAC3D,EAAKtH,QAAQqH,OAAOxB,MAAK,SAAA9B,GAAC,OAAIA,EAAEnF,KAAOwI,EAAMxI,MAAK0I,QAAS,EAC3D,EAAKtH,QAAQmB,MAAQiG,EAAM/K,QAT5B,gDAaPoB,QAAQC,IAAR,MAbO,yBAePuF,aACI,kBAAM,EAAKuC,SAAU,KAhBlB,4EA7GD,2DAkId1F,YAlIc,uCAkIA,WAAOyH,GAAP,SAAAnK,EAAA,6DACV,EAAKoI,SAAU,EADL,kBAGAjH,EAAMe,SAASQ,YAAYyH,GAH3B,OAINtE,aAAY,WACJ,EAAKjD,SAAW,EAAKA,QAAQqH,SAC7B,EAAKrH,QAAQqH,OAAS,EAAKrH,QAAQqH,OAAOvD,QAAO,SAAAC,GAAC,OAAIA,EAAEnF,KAAO2I,SANjE,gDAUN9J,QAAQC,IAAR,MAVM,yBAYNuF,aACI,kBAAM,EAAKuC,SAAU,KAbnB,4EAlIA,2DAoJdzF,YApJc,uCAoJA,WAAOC,GAAP,SAAA5C,EAAA,+EAEAmB,EAAMe,SAASS,YAAYC,GAF3B,OAGNiD,aAAY,WACJ,EAAKjD,UACL,EAAKA,QAAQkB,YAAclB,EAAQkB,YACnC,EAAKlB,QAAQqB,IAAMrB,EAAQqB,QAN7B,+CAUN5D,QAAQC,IAAR,MAVM,wDApJA,2DAkKduC,gBAlKc,uCAkKI,WAAOV,EAAkB+B,GAAzB,SAAAlE,EAAA,6DACd,EAAKoI,SAAU,EADD,kBAGJjH,EAAMe,SAASW,gBAAgBV,GAH3B,OAIVvC,EAAMwK,cAAcrD,wBAAwB5E,GAC5C0D,aAAY,WAAO,IAAD,IACV,EAAKjD,SAAW,EAAKA,QAAQT,YAAb,UAA0BvC,EAAMmG,UAAU/D,YAA1C,aAA0B,EAAsBG,WAAY,EAAKS,QAAQT,WAAaA,IACtG+B,EAAY,EAAKtB,QAAQwB,iBAAmB,EAAKxB,QAAQwB,iBACzD,EAAKxB,QAAQsB,WAAa,EAAKtB,QAAQsB,WAEvC,EAAKtB,SAAW,EAAKA,QAAQT,YAAb,UAA0BvC,EAAMmG,UAAU/D,YAA1C,aAA0B,EAAsBG,YAChE+B,EAAY,EAAKtB,QAAQuB,iBAAmB,EAAKvB,QAAQuB,kBAE7D,EAAKqF,WAAWtE,SAAQ,SAAAM,GAChBA,EAAErD,WAAaA,IACfqD,EAAEtB,UAAYsB,EAAEpB,iBAAmBoB,EAAEpB,iBACrCoB,EAAEtB,WAAasB,EAAEtB,iBAhBnB,gDAqBV7D,QAAQC,IAAR,MArBU,yBAwBVuF,aAAY,WACR,EAAKuC,SAAU,KAzBT,4EAlKJ,6DAgMdiC,eAhMc,uCAgMG,WAAOtH,GAAP,eAAA/C,EAAA,6DACb,EAAKyJ,kBAAmB,EADX,kBAGetI,EAAMe,SAASY,cAAc,EAAKF,QAAST,SAAUY,GAHpE,OAGHmB,EAHG,OAIT2B,aAAY,WACR,EAAK2D,WAAatF,KALb,gDAST7D,QAAQC,IAAR,MATS,yBAYTuF,aAAY,WACR,EAAK4D,kBAAmB,KAbnB,4EAhMH,2DAkNda,gBAAkB,WACd,EAAKd,WAAa,IAnNR,KAsNde,uBAAyB,WACrB,EAAKxC,WAAa,IAvNR,KA0NdyC,kBA1Nc,uCA0NM,WAAOzH,GAAP,eAAA/C,EAAA,6DAChB,EAAKyJ,kBAAmB,EADR,kBAIatI,EAAMe,SAASc,qBAAqB,EAAKJ,QAAST,SAAUY,GAJzE,OAINgF,EAJM,OAKZ1H,QAAQC,IAAIyH,GACZlC,aAAY,WACR,EAAKkC,WAAaA,KAPV,gDAWZ1H,QAAQC,IAAR,MAXY,yBAcZuF,aAAY,WACR,EAAK4D,kBAAmB,KAfhB,4EA1NN,sDACVxC,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKwC,aACX,SAAA1C,GACI,GAAW,IAAPA,GAAmB,IAAPA,EAAU,CACtB,IAAMjE,EAAmB,IAAPiE,EAAW,YAAc,YAC3C,EAAKqD,eAAetH,QAEnB,GAAW,IAAPiE,EAAU,CACf,EAAKuD,yBACL,IAAIxH,EAAY,GAChB,OAAQiE,EAAGM,YACP,IAAK,IACFvE,EAAY,SACX,MACJ,IAAK,IACDA,EAAY,OACZ,MACJ,IAAK,IACDA,EAAY,SAIpB,EAAKyH,kBAAkBzH,QAGvB,EAAKuH,qBAKjBpD,aACI,kBAAM,EAAKyC,kBACX,SAAA3C,GACI,IAAIjE,EAAY,GAEhB,OADA,EAAKwH,yBACGvD,EAAGM,YACP,IAAK,IACFvE,EAAY,SACX,MACJ,IAAK,IACDA,EAAY,OACZ,MACJ,IAAK,IACDA,EAAY,SAIpB,EAAKyH,kBAAkBzH,M,+CAanC,WACI,SAAInD,EAAMmG,UAAU/D,OAAQ1D,KAAKsE,UACtBhD,EAAMmG,UAAU/D,KAAKG,WAAa7D,KAAKsE,QAAQT,a,cClErDvC,EAAe,CACxBwK,cAAe,IAAI/F,EACnBxE,YAAa,ICXb,aAAe,IAAD,gCAJdM,MAA4B,KAId,KAHdR,MAAuBsJ,aAAawB,QAAQ,OAG9B,KAFdC,WAAY,EAEE,KAed1J,eAAiB,SAACb,GACd,EAAKA,MAAQA,GAhBH,KAmBd0I,SAAW,SAAClJ,GACJA,GAAOgL,OAAO1B,aAAa2B,QAAQ,MAAMjL,GAC7C,EAAKA,MAAQA,GArBH,KAwBdkL,aAAe,WACX,EAAKH,WAAY,GAxBjBzD,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKvH,SACX,SAAAA,GACQA,EACAgL,OAAO1B,aAAa2B,QAAQ,MAAMjL,GAElCgL,OAAO1B,aAAaC,WAAW,WDG/CnD,UAAW,IAAI4C,EACfG,WAAY,IERZ,aAAe,IAAD,gCALdgC,MAAe,CACXC,MAAM,EACN3L,KAAM,MAGI,KAId4L,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAM1L,KAAO6L,GANR,KASdlC,WAAa,WACT,EAAK+B,MAAMC,MAAO,EAClB,EAAKD,MAAM1L,KAAO,MAVlB6H,YAAmB3I,OFQvB4M,aAAc,IAAI7B,EAClB8B,aAAc,IGbd,aAAe,IAAD,gCAHdC,QAAyB,GAGX,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACwB,IAAD,MAAtC3L,EAAMwK,cAAc5F,mBACpB,EAAK6G,eAAgB,IAAIG,KACpBC,QAAQ5M,oBAAkD0M,EAAY,CACnEG,mBAAoB,kCAAM9L,EAAMmG,UAAU/D,YAAtB,aAAM,EAAsBrC,SAEnDgM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAED,YAAKV,qBAAL,SAAoBW,QAAQC,OAAM,SAAA9L,GAAK,OAAIE,QAAQC,IAAI,iCAAkCH,MAEzF,YAAKkL,qBAAL,SAAoBa,GAAG,gBAAgB,SAACC,GACpCA,EAASjH,SAAQ,SAAAM,GAAC,OACdA,EAAE4G,UAAY,IAAI1D,KAAKlD,EAAE4G,UAAY,QAGzCvG,aAAY,kBAAM,EAAKuF,QAAUe,QAGrC,YAAKd,qBAAL,SAAoBa,GAAG,kBAAkB,SAACC,GACtCA,EAASC,UAAY,IAAI1D,KAAKyD,EAASC,WACvCvG,aAAY,kBAAM,EAAKuF,QAAQiB,QAAQF,WA1BzC,KAgCdG,kBAAoB,WACW,OAAvB,EAAKjB,eACL,EAAKA,cAAckB,OAAON,OAAM,SAAA9L,GAAK,OAAIE,QAAQC,IAAI,4BAA6BH,OAlC5E,KAsCdqM,cAAgB,WACZ,EAAKpB,QAAU,GACf,EAAKkB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAO/E,GAAP,iBAAA1H,EAAA,6DACT0H,EAAO6D,WAAP,UAAoB3L,EAAMwK,cAAc5F,wBAAxC,aAAoB,EAAsChD,GADjD,4BAGC,EAAK6J,qBAHN,aAGC,EAAoBqB,OAAO,cAAchF,GAH1C,sDAKLrH,QAAQC,IAAR,MALK,wDA3CC,sDACV2G,YAAmB3I,QHedqO,EAAeC,wBAAchN,GAEnC,SAASiN,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WACpB,MAAoDF,IAA5C9G,UAAa/D,EAArB,EAAqBA,KAAMgH,EAA3B,EAA2BA,OAAQgE,EAAnC,EAAmCA,WAEnC,OAEI,aADA,CACCC,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,QAAM,EAACC,OAAK,EAACC,GAAIC,IAASC,GAAG,IAAxC,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,MADjE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWU,KAAK,aAAaP,GAAIC,IAASC,GAAG,gBAE7C,cAACT,EAAA,EAAKI,KAAN,UACI,cAACW,EAAA,EAAD,CAAQC,UAAQ,EAAChD,QAAS,kBAAmBuC,GAAIC,IAASC,GAAG,sBAEhEV,EACG,eAACC,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJ3L,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,QAAS,mBAAoBqK,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAExM,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,YAA1C,SACI,eAACwK,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeG,GAAIiB,IAAMf,GAAE,2BAAe1L,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UAAYqM,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAAS3F,EAAQwF,KAAK,SAASE,KAAK,iBAI/D,cAACtB,EAAA,EAAD,Y,yHCtBLL,gBAAS,YAA2C,IAAD,EAAlBnK,EAAkB,EAAlBA,QAC5C,EAAoCiK,IAA5B3B,EAAR,EAAQA,aAAcnF,EAAtB,EAAsBA,UACdlD,EAA6BqI,EAA7BrI,gBAAiBuF,EAAY8C,EAAZ9C,QAOzB,OAAI,UAAArC,EAAU/D,YAAV,eAAgBG,aAAhB,OAA6BS,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAST,UAAiB,KAGvD,eAACyM,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAClB,MAAO,CAAEmB,MAAO,QAAxC,SACI,cAAChB,EAAA,EAAD,CAAQiB,OAAK,EAACC,MAAM,OAChBjE,SAAgB,OAAPrI,QAAO,IAAPA,OAAA,EAAAA,EAASsB,WACZ,YAAc,oBAE5B,cAAC0K,GAAA,EAAOE,QAAR,CAAgBK,QAAM,EAACtB,MAAO,CAAEmB,MAAO,QAAvC,SACI,cAAChB,EAAA,EAAD,CAAQiB,OAAK,EAACG,OAAK,EACfF,OAAc,OAAPtM,QAAO,IAAPA,OAAA,EAAAA,EAASsB,WAAY,MAAQ,QACpC+G,SAAgB,OAAPrI,QAAO,IAAPA,OAAA,EAAAA,EAASsB,WAAY,WAAa,SAC3CkE,QAASA,EACTiH,SAAUjH,EACVuG,QAAS,SAACnJ,IApB1B,SAAsBA,EAAmBrD,GACrCqD,EAAE8J,iBACF1M,EAAQsB,UAAYrB,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBjEoN,CAAa/J,EAAD,OAAI5C,QAAJ,IAAIA,OAAJ,EAAIA,EAAST,qBCxBjD,SAASqN,KAAwC,IAA/BC,EAA8B,uDAAf,GAAIC,EAAW,uCAC5C,GAAW,MAAPD,EACA,OAAQA,EAAIE,OAASD,EAAKD,EAAIG,OAAO,EAAGF,EAAE,GAAK,MAAQD,EAIhD1C,oBAAS,YAAsC,IAAhBnK,EAAe,EAAfA,QAC1C,OACI,eAACiN,GAAA,EAAD,CAAMrC,GAAIiB,IAAMf,GAAE,oBAAe9K,EAAQT,UAAzC,UACI,cAACgM,EAAA,EAAD,CAAOR,IAAK/K,EAAQmB,OAAS,qBAC7B,eAAC8L,GAAA,EAAKf,QAAN,WACI,cAACe,GAAA,EAAKC,OAAN,UAAclN,EAAQkB,cACtB,cAAC+L,GAAA,EAAKE,YAAN,UAAmBP,GAAS5M,EAAQqB,IAAI,SAE5C,eAAC4L,GAAA,EAAKf,QAAN,CAAckB,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMlC,KAAK,SACXnL,EAAQwB,eAFZ,aAGG,cAAC8L,GAAA,EAAD,IACA,cAAC,GAAD,CAActN,QAASA,aClBvBmK,gBAAS,YAAyD,IAArB3G,EAAoB,EAApBA,UAClD+J,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKnK,EAAUoK,KAAI,SAAChL,GAAD,OACX,cAACiL,GAAA,EAAD,CAAwBC,WAAS,EAC7BC,QACI,cAACL,GAAA,EAAKjD,KAAN,CAA4BG,GAAIiB,IAAMf,GAAE,oBAAelI,EAAErD,UAAzD,SACI,cAACgM,EAAA,EAAD,CAAOyC,KAAK,OACZC,UAAQ,EAAClD,IAAKnI,EAAEzB,OAAS,mBACzB+M,UAAQ,EACRjD,MAAOrI,EAAEtB,UAAYiM,EAAS,QAJlB3K,EAAErD,UAF1B,SAWI,cAACsO,GAAA,EAAM3B,QAAP,UACI,cAAC,GAAD,CAAalM,QAAS4C,OAZlBA,EAAErD,kBCTf,SAAS4O,GAAT,GAAgD,IAAD,IAAnBrP,EAAmB,EAAnBA,SACvC,OACI,eAACsP,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACKtP,EAASmF,aACN,cAACqK,EAAA,EAAD,CAAOhC,MAAM,MAAMiC,SAAS,MAAMlG,QAAQ,YAAY4C,MAAO,CAAEuD,UAAW,YAE9E,cAAC/D,EAAA,EAAK4D,MAAN,UACI,eAAC5D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKc,MAAN,CAAYyC,KAAK,OAAOC,UAAQ,EAAClD,KAAK,UAAAjM,EAAS8G,YAAT,eAAezE,QAAS,qBAC9D,eAACsJ,EAAA,EAAKyB,QAAN,WACI,cAACzB,EAAA,EAAKyC,OAAN,CAAatC,GAAIiB,IAAMf,GAAE,sBAAiBhM,EAASF,IAAnD,SACKE,EAAS6B,QAEd,eAAC8J,EAAA,EAAKyB,QAAN,uBAEI,eAAC,IAAD,CAAMpB,GAAE,oBAAehM,EAASyE,cAAhC,wBAAkDzE,EAAS8G,YAA3D,aAAkD,EAAe1E,eAChEpC,EAAS6G,QACN,cAAC8E,EAAA,EAAK0C,YAAN,UACI,cAACmB,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,SAAnB,+CAMNxN,EAAS6G,QAAU7G,EAAS+E,SAC1B,cAAC4G,EAAA,EAAK0C,YAAN,UACI,cAACmB,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,QAAnB,6DAU5B,cAAC8B,EAAA,EAAD,UACI,iCACI,cAACf,GAAA,EAAD,CAAMlC,KAAK,UAAW5F,kBAAOzG,EAASgC,KAAO,uBAC7C,cAACuM,GAAA,EAAD,CAAMlC,KAAK,WAAYrM,EAASkC,WAGxC,cAACoN,EAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BjL,UAAW1E,EAAS0E,cAElD,eAAC4K,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAO5P,EAAS+B,cAChB,cAACuK,EAAA,EAAD,CAAQR,GAAIiB,IACRf,GAAE,sBAAiBhM,EAASF,IAC5B0N,MAAM,OACNqC,QAAQ,QACRtG,QAAQ,eCzDb8B,oBAAS,WACpB,IACQyE,EADkB3E,IAAlBzC,cACAoH,kBAER,OACI,mCAEQA,EAAkBhB,KAAI,mCAAEiB,EAAF,KAASC,EAAT,YAClB,eAAC,WAAD,WACI,cAAC5B,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAlB,SACKuC,IAEJC,EAASlB,KAAI,SAAAhL,GAAC,OACX,cAAC,GAAD,CAA6B9D,SAAU8D,GAAhBA,EAAEhE,SALlBiQ,W,UCRpB1E,gBAAS,WACpB,MAAuDF,IAA/CzC,cAAiBrH,EAAzB,EAAyBA,UAAWgC,EAApC,EAAoCA,aAEpC,OACI,qCACI,eAACkI,EAAA,EAAD,CAAM2E,UAAQ,EAAChB,KAAK,QAAQ/C,MAAO,CAAEmB,MAAO,OAAQ6C,UAAW,IAA/D,UACI,cAAC/B,EAAA,EAAD,CAAQpB,KAAK,SAASyC,UAAQ,EAACjC,MAAM,OAAOjE,QAAQ,YACpD,cAACgC,EAAA,EAAKI,KAAN,CACIpC,QAAQ,iBACR6G,OAAQ/O,EAAUgP,IAAI,OACtBpD,QAAS,kBAAM5J,EAAa,MAAO,WAEvC,cAACkI,EAAA,EAAKI,KAAN,CAAWpC,QAAQ,YACf6G,OAAQ/O,EAAUgP,IAAI,WACtBpD,QAAS,kBAAM5J,EAAa,UAAW,WAE3C,cAACkI,EAAA,EAAKI,KAAN,CAAWpC,QAAQ,cACf6G,OAAQ/O,EAAUgP,IAAI,UACtBpD,QAAS,kBAAM5J,EAAa,SAAU,cAG9C,cAAC+K,EAAA,EAAD,IACA,cAAC,KAAD,CACIkC,SAAU,SAACtO,GAAUqB,EAAa,YAAYrB,IAC9CsB,MAAOjC,EAAU7D,IAAI,cAAgB,IAAIwJ,a,+BC3B1C,SAASuJ,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAajD,OAAK,EAACpB,MAAO,CAAEgE,UAAW,IAAvC,SACI,eAACb,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASnD,MAAO,CAAEsE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYpC,OAAb,CAAoB/L,OAAK,EAAzB,UACI,cAACmO,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACpB,EAAA,EAAD,UACI,eAACkB,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACpB,EAAA,EAAD,CAASK,WAAS,EAACxD,MAAO,CAAEsE,UAAW,MACvC,cAACnB,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAACtD,EAAA,EAAD,CAAQqB,UAAQ,EAACH,MAAM,OAAOqC,QAAQ,QAAQtG,QAAQ,kBChB/D8B,oBAAS,WACpB,IAAQ3C,EAAkByC,IAAlBzC,cACAhF,EAAkEgF,EAAlEhF,eAAgBd,EAAkD8F,EAAlD9F,iBAAkBQ,EAAgCsF,EAAhCtF,gBAAiBzG,EAAe+L,EAAf/L,WAC3D,EAAsCiU,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACFnO,EAAiBsM,MAAQ,GAAGxL,MACjC,CAACd,EAAkBc,IAGlB,eAACsN,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAM,KAAnB,SACK5E,EAAczF,iBAAmB4N,EAC9B,qCACI,cAACN,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,KAAD,CAAgBW,UAAW,EACvBC,SApBpB,WACIL,GAAe,GACf1N,EAAgB,IAAIvG,EAAaF,EAAYyU,YAAc,IAC3D1N,IAAiBjG,MAAK,kBAAMqT,GAAe,OAkB3BO,SAAUR,KAAiBlU,GAAcA,EAAWyU,YAAczU,EAAW2U,WAC7EC,aAAa,EAHjB,SAII,cAAC,GAAD,QAIZ,cAACP,EAAA,EAAKC,OAAN,CAAa3D,MAAM,IAAnB,SACI,cAACkE,GAAD,MAEJ,cAACR,EAAA,EAAKC,OAAN,CAAa3D,MAAM,KAAnB,SACI,cAACmE,EAAA,EAAD,CAAQrB,OAAQS,Y,4BCpCjB,SAASa,GAAYC,GAChC,MAAsBC,aAASD,EAAMtF,MAArC,mBAAOwF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYvT,MAAOqT,EAAKG,WAAaH,EAAKrT,MAA1C,UACI,gCAAQkT,EAAMO,QACd,iDAAWL,GAAUF,IACpBG,EAAKG,SAAWH,EAAKrT,MAClB,cAAC+Q,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,MAAnB,SAA0BsE,EAAKrT,QAAiB,QCXjD4M,oBAAS,WACpB,IAAMhH,EAAc8G,IAAd9G,UAEN,OACI,cAAC,KAAD,CACI8N,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAI5T,MAAO,MACjD6T,SAAU,SAACtM,EAAD,GAAwC,IAA9BuM,EAA6B,EAA7BA,UAAUC,EAAmB,EAAnBA,cAC1BnO,EAAUhE,MAAM2F,GACfuE,OAAM,SAAC9L,GAAD,OAAW8T,EAAU,CAAC9T,MAAM,iCAClCgU,SAAQ,kBAAMD,GAAc,OALrC,SAQK,gBAAGE,EAAH,EAAGA,aAAc1P,EAAjB,EAAiBA,aAAcjE,EAA/B,EAA+BA,OAA/B,OACG,eAAC,KAAD,CAAM4T,UAAU,UAAUC,aAAa,MAAMN,SAAUI,EAAvD,UACI,cAACtE,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAQ,wBAAwBiE,MAAM,OAAOkC,UAAU,WACvE,cAACgC,GAAD,CAAarF,KAAK,QAAQwG,YAAY,UACtC,cAACnB,GAAD,CAAarF,KAAK,WAAWwG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACIzG,KAAK,QAAQ0G,OAAQ,kBACrB,cAACvD,EAAA,EAAD,CAAOrD,MAAO,CAAC6G,aAAc,IAAKtF,OAAK,EAACF,MAAM,MAAMjE,QAASxK,EAAON,WAGxE,cAAC6N,EAAA,EAAD,CAAQ5F,QAAS1D,EAAcuJ,UAAQ,EAAChD,QAAQ,QAAQuJ,KAAK,SAASvF,OAAK,a,mBCtBhF,SAAS0F,GAAT,GAA6C,IAAlBlU,EAAiB,EAAjBA,OACtC,OACI,cAACmU,GAAA,EAAD,CAASzU,OAAK,EAAd,SACKM,GACG,cAACmU,GAAA,EAAQtE,KAAT,UACK7P,EAAO+P,KAAI,SAACqE,EAAUC,GACnB,OAAO,cAACF,GAAA,EAAQvH,KAAT,UAAuBwH,GAAJC,UCJnC/H,oBAAS,WACpB,IAAMhH,EAAc8G,IAAd9G,UAEN,OACI,cAAC,KAAD,CACI8N,cAAe,CAAE/P,YAAa,GAAI3B,SAAU,GAAI2R,MAAO,GAAIC,SAAU,GAAI5T,MAAO,MAChF6T,SAAU,SAACtM,EAAD,GAA2C,IAAhCuM,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAC5BnO,EAAU9D,SAASyF,GACduE,OAAM,SAAC9L,GAER8T,EAAU,CAAE9T,aACVgU,SAAQ,kBAAMD,GAAc,OAGtCa,iBAAkBC,KAAW,CACzBlR,YAAakR,OAAaC,WAC1B9S,SAAU6S,OAAaC,WACvBlB,SAAUiB,OAAaC,WACvBnB,MAAOkB,OAAaC,WAAWnB,UAdvC,SAiBK,gBAAGM,EAAH,EAAGA,aAAc1P,EAAjB,EAAiBA,aAAcjE,EAA/B,EAA+BA,OAAQyU,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBC,aAAa,MAAMN,SAAUI,EAA7D,UACI,cAACtE,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAQ,gCAAgCiE,MAAM,OAAOkC,UAAU,WAC/E,cAACgC,GAAD,CAAarF,KAAK,cAAcwG,YAAY,iBAC5C,cAACnB,GAAD,CAAarF,KAAK,WAAWwG,YAAY,cACzC,cAACnB,GAAD,CAAarF,KAAK,QAAQwG,YAAY,UACtC,cAACnB,GAAD,CAAarF,KAAK,WAAWwG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACIzG,KAAK,QAAQ0G,OAAQ,kBACjB,cAACE,GAAD,CAAiBlU,OAAQA,EAAON,WAIxC,cAAC6N,EAAA,EAAD,CAAQ5F,QAAS1D,EAAc2K,UAAW6F,IAAYC,GAASzQ,EAAcuJ,UAAQ,EAAChD,QAAQ,WAAWuJ,KAAK,SAASvF,OAAK,aCnCjIlC,gBAAS,WACpB,MAAiCF,IAAzB9G,EAAR,EAAQA,UAAU+C,EAAlB,EAAkBA,WAElB,OACI,cAACkI,EAAA,EAAD,CAAS9D,UAAQ,EAACkE,UAAU,SAASQ,UAAQ,EAACyC,UAAU,WAAxD,SACI,eAACjH,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACI,eAACsB,EAAA,EAAD,CAAQtC,GAAG,KAAKN,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOyC,KAAK,UAAUjD,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE6G,aAAc,MADnF,kBAKC3O,EAAUiH,WACX,qCACI,cAAC8C,EAAA,EAAD,CAAQtC,GAAG,KAAKN,UAAQ,EAACjC,QAAQ,4BACjC,cAAC+C,EAAA,EAAD,CAAQR,GAAIiB,IAAMf,GAAG,cAAckD,KAAK,OAAO1D,UAAQ,EAAvD,oCAIA,qCACA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAM7F,EAAWkC,UAAU,cAAC,GAAD,MAAgB4F,KAAK,OAAO1D,UAAQ,EAAhF,wBAGA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAM7F,EAAWkC,UAAU,cAAC,GAAD,MAAmB4F,KAAK,OAAO1D,UAAQ,EAAnF,kC,UCtBL,SAASkI,GAAT,GAAyE,IAAD,IAA7ClI,gBAA6C,aAA3BjC,eAA2B,MAAnB,YAAmB,EACnF,OACI,cAACoK,GAAA,EAAD,CAAQvD,QAAQ,EAAM5E,SAAUA,EAAhC,SACI,cAACiG,EAAA,EAAD,CAAQlI,QAASA,MCAd,SAASqK,GAAWjC,GAC/B,MAAsBC,aAASD,EAAMtF,MAArC,mBAAOwF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYvT,MAAOqT,EAAKG,WAAaH,EAAKrT,MAA1C,UACI,gCAAQkT,EAAMO,QACd,gEAAcL,GAAUF,GAAxB,IAA+BkC,KAAMlC,EAAMkC,QAC1C/B,EAAKG,SAAWH,EAAKrT,MAClB,cAAC+Q,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,MAAnB,SAA0BsE,EAAKrT,QAAiB,Q,cCPjD,SAASqV,GAAcnC,GAClC,MAA+BC,aAASD,EAAMtF,MAA9C,mBAAOwF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYvT,MAAOqT,EAAKG,WAAaH,EAAKrT,MAA1C,UACI,gCAAQkT,EAAMO,QACd,cAAC8B,GAAA,EAAD,CACAC,WAAS,EACTC,QAASvC,EAAMuC,QACf5Q,MAAOuO,EAAMvO,OAAS,KACtBgN,SAAU,SAACxM,EAAEqQ,GACTJ,EAAQK,SAASD,EAAE7Q,QAEvB+Q,OAAQ,kBAAIN,EAAQO,YAAW,IAC/BzB,YAAalB,EAAMkB,cAElBf,EAAKG,SAAWH,EAAKrT,MAClB,cAAC+Q,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,MAAnB,SAA0BsE,EAAKrT,QAAiB,Q,yBCtBjD,SAAS8V,GAAY5C,GAChC,MAA+BC,aAASD,EAAMtF,MAA9C,mBAAOwF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYvT,MAAOqT,EAAKG,WAAaH,EAAKrT,MAA1C,UACI,cAAC,KAAD,uCACQoT,GACAF,GAFR,IAGI6C,SAAW3C,EAAMvO,OAAS,IAAI0D,KAAK6K,EAAMvO,QAAW,KACpDgN,SAAU,SAAChN,GAAD,OAAWyQ,EAAQK,SAAS9Q,OAEzCwO,EAAKG,SAAWH,EAAKrT,MAClB,cAAC+Q,EAAA,EAAD,CAAO9B,OAAK,EAACF,MAAM,MAAnB,SAA0BsE,EAAKrT,QAAiB,QChBzD,IAAMgW,GAAkB,CAC3B,CAAC3H,KAAK,SAAUxJ,MAAM,UACtB,CAACwJ,KAAK,UAAWxJ,MAAM,WACvB,CAACwJ,KAAK,OAAQxJ,MAAM,QACpB,CAACwJ,KAAK,OAAQxJ,MAAM,QACpB,CAACwJ,KAAK,QAASxJ,MAAM,SACrB,CAACwJ,KAAK,SAAUxJ,MAAM,WCUX+H,gBAAS,WACpB,IAAMpM,EAAUyV,eACRhM,EAAkByC,IAAlBzC,cACAtE,EAAiEsE,EAAjEtE,eAAgBO,EAAiD+D,EAAjD/D,eAAgBV,EAAiCyE,EAAjCzE,aAAchB,EAAmByF,EAAnBzF,eAC9CnD,EAAO6U,eAAP7U,GAER,EAAgC8Q,mBAA6B,IAAIjP,GAAjE,mBAAO3B,EAAP,KAAiB+D,EAAjB,KAEMsP,EAAmBC,KAAW,CAChCzR,MAAOyR,OAAaC,SAAS,8BAC7BxR,YAAauR,OAAaC,SAAS,2BACnCzR,SAAUwR,OAAaC,WACvBvR,KAAMsR,OAAaC,SAAS,oBAAoBqB,WAChD3S,KAAMqR,OAAaC,WACnBrR,MAAOoR,OAAaC,aA2BxB,SAASsB,IACL7U,EAASF,GAAKb,EAAQC,KAAR,sBAA4Bc,EAASF,KAAQb,EAAQC,KAAK,eAG5E,OA5BA6R,qBAAU,WACFjR,GACAmE,EAAanE,GAAIrC,MACb,SAACqG,GACGC,EAAY,IAAIpC,EAAmBmC,SAIhD,CAAChE,EAAImE,IAoBJhB,EAAuB,cAACyQ,GAAD,IAGvB,eAACpE,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAACxB,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAOjE,QAAQ,qBACjC,cAAC,KAAD,CAAQ8J,iBAAkBA,EACtByB,oBAAkB,EAAC3C,cAAenS,EAClCsS,SAAU,SAACtM,GAAD,OAzBtB,SAA0BhG,GACnBA,EAASF,GACR6E,EAAe3E,GAAUvC,MACrB,kBAAMwB,EAAQC,KAAR,sBAA4Bc,EAASF,QAK/CsE,EAAepE,GAAUvC,MACrB,kBAAMwB,EAAQC,KAAR,sBAA4Bc,EAASF,QAgBrBiV,CAAiB/O,IAF3C,SAGK,gBAAG0M,EAAH,EAAGA,aAAc1P,EAAjB,EAAiBA,aAAawQ,EAA9B,EAA8BA,QAAQC,EAAtC,EAAsCA,MAAtC,OACG,eAAC,KAAD,CAAMd,UAAU,UAAUL,SAAUI,EAAcE,aAAa,MAA/D,UACI,cAAClB,GAAD,CAAarF,KAAK,QAAQwG,YAAY,UACtC,cAACe,GAAD,CAAaC,KAAM,EAAGhB,YAAY,cAAcxG,KAAK,gBACrD,cAACyH,GAAD,CAAeI,QAASO,GAAiB5B,YAAY,WAAWxG,KAAK,aACrE,cAACkI,GAAD,CACAS,gBAAgB,OAChB3I,KAAK,OACL4I,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEV,cAAC/G,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAOjE,QAAQ,qBAClC,cAACmI,GAAD,CAAamB,YAAY,OAAOxG,KAAK,SACrC,cAACqF,GAAD,CAAamB,YAAY,QAAQxG,KAAK,UACtC,cAACC,EAAA,EAAD,CACIqB,SAAY3K,IAAewQ,IAAWC,EACtC5D,QAAQ,QAAQtD,UAAQ,EAACuG,KAAK,SAASvJ,QAAQ,SAAS7C,QAAS1D,IACrE,cAACsJ,EAAA,EAAD,CAAQuD,QAAQ,QAAQiD,KAAK,SAASvJ,QAAQ,SAAS0D,QAAS4H,gBC/ElFO,GAAqB,CACvBpQ,OAAQ,mBAGNqQ,GAAyB,CAC3B7I,SAAU,WACV8I,OAAQ,KACRC,KAAM,KACNjI,MAAO,OACPkI,OAAQ,OACRhI,MAAO,SAOInC,gBAAS,YAAoD,IAAD,IAAnBrL,EAAmB,EAAnBA,SACpD,EAAoFmL,IAA5EzC,cAAiB5D,EAAzB,EAAyBA,iBAAkB9B,EAA3C,EAA2CA,aAAckC,EAAzD,EAAyDA,qBAEzD,OACI,eAACoK,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAAS5B,OAAK,EAAC+B,SAAS,MAAMtD,MAAO,CAAEsJ,QAAS,KAAhD,UACKzV,EAASmF,aACN,cAACqK,EAAA,EAAD,CAAOrD,MAAO,CAAEK,SAAU,WAAYkJ,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChEC,QAAM,EAACpI,MAAM,MAAMjE,QAAQ,cAEnC,cAACkD,EAAA,EAAD,CAAOR,IAAG,iCAA4BjM,EAAS8B,SAArC,QAAqDyL,OAAK,EAACpB,MAAOiJ,KAC5E,cAAC9F,EAAA,EAAD,CAASnD,MAAOkJ,GAAwB3H,OAAK,EAA7C,SACI,cAAC/B,EAAA,EAAK4D,MAAN,UACI,cAAC5D,EAAA,EAAD,UACI,eAACA,EAAA,EAAKyB,QAAN,WACI,cAACgB,EAAA,EAAD,CACIc,KAAK,OACL3F,QAASvJ,EAAS6B,MAClBsK,MAAO,CAAEqB,MAAO,WAEpB,4BAAI/G,kBAAOzG,EAASgC,KAAO,iBAC3B,2CACc,iCACN,cAAC,IAAD,CAAMgK,GAAE,8BAAehM,EAAS8G,YAAxB,aAAe,EAAerG,UAAtC,mBACKT,EAAS8G,YADd,aACK,EAAe1E,+BAOhD,cAACkN,EAAA,EAAD,CAASM,UAAQ,EAACH,SAAS,SAA3B,SACKzP,EAAS6G,OACN,qCACI,cAACyF,EAAA,EAAD,CACIkB,MAAOxN,EAASmF,YAAc,QAAU,MACxC0K,QAAQ,OAAOnC,OAAK,EACpBnE,QAASvJ,EAASmF,YAAc,uBAAyB,kBACzD8H,QAAS/H,EACTwB,QAAS1D,IAEb,cAACsJ,EAAA,EAAD,CAAQkB,MAAM,SAASqC,QAAQ,QAAQ/D,GAAIiB,IAAMf,GAAE,kBAAahM,EAASF,IACrE6N,SAAU3N,EAASmF,YADvB,6BAMJnF,EAAS+E,QACT,cAACuH,EAAA,EAAD,CAAQW,QAASnI,EAAkB4B,QAAS1D,EAAc2K,SAAU3K,EAApE,+BAEA,cAACsJ,EAAA,EAAD,CAAQkB,MAAM,OAAOP,QAASnI,EAAkB4B,QAAS1D,EAAc2K,SAAU3K,EAAjF,mCCjELqI,gBAAS,YAAkD,IAAlBrL,EAAiB,EAAjBA,SACpD,OACI,eAACsP,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASG,SAAS,MAAlB,SACI,eAACuB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACI,cAACiB,GAAA,EAAD,CAAMW,KAAK,QAAQ1B,MAAM,OAAOnB,KAAK,WAEzC,cAAC2E,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,4BAAItN,EAAS+B,qBAIzB,cAACuN,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,eAACuB,EAAA,EAAD,CAAM6E,cAAc,SAApB,UACI,cAAC7E,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACI,cAACiB,GAAA,EAAD,CAAMlC,KAAK,WAAW6C,KAAK,QAAQ1B,MAAM,WAE7C,cAACwD,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACR,+BACG7G,kBAAOzG,EAASgC,KAAM,gCAKzB,cAACsN,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,eAACuB,EAAA,EAAD,CAAM6E,cAAc,SAApB,UACI,cAAC7E,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACI,cAACiB,GAAA,EAAD,CAAMlC,KAAK,SAAS6C,KAAK,QAAQ1B,MAAM,WAE3C,cAACwD,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,iCAAOtN,EAASkC,MAAhB,KAAyBlC,EAASiC,qBC/B3CoJ,gBAAS,YAAmE,IAAD,IAAlCrL,SAAU0E,EAAwB,EAAxBA,UAAUoC,EAAc,EAAdA,KACxE,OAAKpC,EAED,qCACI,eAAC4K,EAAA,EAAD,CACII,UAAU,SACVvD,MAAO,CAAE2J,OAAQ,QACjBrG,SAAS,MACTE,WAAS,EACTnE,UAAQ,EACRgC,MAAM,OANV,UAQK9I,EAAUuJ,OAAOrI,WARtB,IAQwD,IAArBlB,EAAUuJ,OAAe,SAAS,SARrE,YAUA,cAACqB,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,cAACb,GAAA,EAAD,CAAMmH,SAAO,EAACC,SAAO,EAArB,SACKtR,EAAUoK,KAAI,SAAChL,GAAD,OACV,eAAC6H,EAAA,EAAD,CAAMQ,MAAO,CAAEK,SAAU,YAAzB,UACK1I,EAAErD,YAAF,OAAeqG,QAAf,IAAeA,OAAf,EAAeA,EAAMrG,WACjB,cAAC+O,EAAA,EAAD,CACArD,MAAO,CAAEK,SAAU,YACnBgB,MAAM,SACNoI,OAAO,QAHP,kBAQT,cAACnJ,EAAA,EAAD,CAAOyC,KAAK,OAAOjD,IAAKnI,EAAEzB,OAAS,qBACnC,eAACsJ,EAAA,EAAKyB,QAAN,CAAcyI,cAAc,SAA5B,UACI,cAAClK,EAAA,EAAKyC,OAAN,CAAatC,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAelI,EAAErD,UAAzB,SAAsCqD,EAAE1B,gBAE3C0B,EAAEtB,WACC,cAACmJ,EAAA,EAAKsK,MAAN,CAAY9J,MAAO,CAAEqB,MAAO,UAA5B,4BAhBoC1J,EAAErD,oBAhB5C,Q,oBCGZ4K,gBAAS,YAAoD,IAAtBxB,EAAqB,EAArBA,WAC1CJ,EAAiB0B,IAAjB1B,aAERsH,qBAAU,WAIN,OAHIlH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAElB,IAAMwJ,EAAmBC,KAAW,CAChC5V,KAAM4V,OAAaC,SAAS,6BAGhC,OACI,qCACI,cAACjE,EAAA,EAAD,CACII,UAAU,SACVD,SAAS,MACTjE,UAAQ,EACRgC,MAAM,OACNrB,MAAO,CAAE2J,OAAQ,QALrB,SAOI,cAAC1H,EAAA,EAAD,sCAEJ,cAACkB,EAAA,EAAD,CAASG,UAAQ,EAACG,UAAQ,EAA1B,SACI,eAACsG,GAAA,EAAQ3G,MAAT,WACK9F,EAAaC,QAAQoF,KAAI,SAAApF,GAAO,OAC7B,eAACwM,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBlK,IAAKvC,EAAQrH,OAAS,qBACtC,eAAC6T,GAAA,EAAQ9I,QAAT,WACI,cAAC8I,GAAA,EAAQE,OAAT,CAAgBtK,GAAIiB,IAAMf,GAAE,oBAAetC,EAAQjJ,UAAnD,SACKiJ,EAAQtH,cAEb,cAAC8T,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoB5M,EAAQgB,WAAlC,YAEJ,cAACwL,GAAA,EAAQK,KAAT,CAAcpK,MAAO,CAACqK,WAAW,YAAjC,SAA+C9M,EAAQhM,YATjDgM,EAAQ5J,GAAG8F,eAc7B,cAAC,KAAD,CAAQyN,iBAAkBA,EACtBf,SAAU,SAACtM,EAAD,OAAUyQ,EAAV,EAAUA,UAAV,OAAyBhN,EAAasB,WAAW/E,GAAQvI,MAAK,kBAAMgZ,QAC9EtE,cAAe,CAAEzU,KAAM,IAF3B,SAIK,gBAAGsF,EAAH,EAAGA,aAAcwQ,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAMC,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOtG,KAAK,OAAZ,SACK,SAACsF,GAAD,OACG,sBAAKxF,MAAO,CAACK,SAAU,YAAvB,UACI,cAACiF,EAAA,EAAD,CAAQrB,OAAQpN,IAChB,kDACI6P,YAAY,qBACZgB,KAAM,GACFlC,EAAME,OAHd,IAII6E,WAAY,SAAA5S,GACK,UAATA,EAAE1E,KAAkB0E,EAAE6S,UAGb,UAAT7S,EAAE1E,KAAkB0E,EAAE6S,WACtB7S,EAAE8J,iBACF4F,GAAWd,+BCnEpDrH,gBAAS,WACpB,IAAQ3C,EAAkByC,IAAlBzC,cACkB1I,EAAkE0I,EAApF5F,iBAA4BmB,EAAwDyE,EAAxDzE,aAAchB,EAA0CyF,EAA1CzF,eAAgBmC,EAA0BsD,EAA1BtD,sBAC1DtF,EAAO6U,eAAP7U,GASR,OAPAiR,qBAAU,WACN,GAAIjR,EAEA,OADAmE,EAAanE,GACN,kBAAMsF,OAElB,CAACtF,EAAImE,EAAamB,IAEjBnC,IAAmBjD,EAAiB,cAAC0T,GAAD,IAGrC,eAAC1C,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACK,cAAC,GAAD,CAAsBtN,SAAUA,IAChC,cAAC,GAAD,CAAuBA,SAAUA,IACjC,cAAC,GAAD,CAAoB6J,WAAY7J,EAASF,QAE9C,cAACkR,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,SACK,cAAC,GAAD,CAAuBtN,SAAUA,YC3BlC,SAAS4W,KACpB,IACA,EAA2BhG,mBAAS,MAApC,mBAAO7R,EAAP,KAAe8X,EAAf,KAgCA,OACI,qCACI,cAACzI,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAQ,yBACxB,cAAC+F,EAAA,EAAD,UACI,eAAChD,EAAA,EAAOiD,MAAR,CAAcuH,OAAO,IAArB,UACI,cAACxK,EAAA,EAAD,CAAQW,QAnCxB,WACIjQ,IAAMQ,IAAIuZ,uBAA6BxM,OAAM,SAAA4I,GAAG,OAAIxU,QAAQC,IAAIuU,EAAI9V,cAkCvBkM,QAAQ,YAAYmE,OAAK,EAACsJ,SAAO,IAClE,cAAC1K,EAAA,EAAD,CAAQW,QAhCxB,WACIjQ,IAAMQ,IAAIuZ,yBAA+BxM,OAAM,SAAA4I,GAAG,OAAIxU,QAAQC,IAAIuU,EAAI9V,cA+BvBkM,QAAQ,cAAcmE,OAAK,EAACsJ,SAAO,IACtE,cAAC1K,EAAA,EAAD,CAAQW,QAXxB,WACIjQ,IAAMW,KAAKoZ,iBAAwB,IAAIxM,OAAM,SAAA4I,GAAG,OAAI0D,EAAS1D,OAUT5J,QAAQ,mBAAmBmE,OAAK,EAACsJ,SAAO,IAChF,cAAC1K,EAAA,EAAD,CAAQW,QA9BxB,WACIjQ,IAAMQ,IAAIuZ,0BAAgCxM,OAAM,SAAA4I,GAAG,OAAIxU,QAAQC,IAAIuU,EAAI9V,cA6BvBkM,QAAQ,eAAemE,OAAK,EAACsJ,SAAO,IACxE,cAAC1K,EAAA,EAAD,CAAQW,QA3BxB,WACIjQ,IAAMQ,IAAIuZ,0BAAgCxM,OAAM,SAAA4I,GAAG,OAAIxU,QAAQC,IAAIuU,EAAI9V,cA0BtBkM,QAAQ,eAAemE,OAAK,EAACsJ,SAAO,IACzE,cAAC1K,EAAA,EAAD,CAAQW,QAxBxB,WACItO,QAAQC,IAAI,oBACZ5B,IAAMQ,IAAIuZ,2BAAiCxM,OAAM,SAAA4I,GAEzCxU,QAAQC,IAAI,sBACZD,QAAQC,IAAIuU,OAmBwB5J,QAAQ,WAAWmE,OAAK,EAACsJ,SAAO,SAIvEjY,GACG,cAACkU,GAAD,CAAiBlU,OAAQA,OCnD1B,SAASkY,KACpB,OACI,eAAC3H,EAAA,EAAD,CAASuD,aAAW,EAApB,UACI,eAACzE,EAAA,EAAD,CAAQpB,MAAI,EAAZ,UACI,cAACuB,GAAA,EAAD,CAAMlC,KAAK,WADf,sBAIA,cAACiD,EAAA,EAAQ4H,OAAT,UACI,cAAC5K,EAAA,EAAD,CAAQR,GAAIiB,IAAMf,GAAG,cAAcgL,SAAO,EAA1C,4CCND3L,oBAAS,WAAuB,IAAD,QACnClN,EAAegN,IAAfhN,YACP,OACI,eAACuN,EAAA,EAAD,WACI,cAAC0C,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAQ,iBACxB,cAAC6E,EAAA,EAAD,CAAQ6B,KAAG,EAACnE,GAAG,KAAK0B,MAAM,MAAMjE,QAAO,UAAEpL,EAAYM,aAAd,aAAE,EAAmB0Y,UAFhE,oBAGKhZ,EAAYM,aAHjB,aAGK,EAAmBoB,eAHxB,QAIQ,eAACyP,EAAA,EAAD,WACI,cAAClB,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAQ,cAAciE,MAAM,SAC5C,sBAAMrB,MAAO,CAACgE,UAAU,QAAxB,mBAAkChS,EAAYM,aAA9C,aAAkC,EAAmBoB,mB,UCV1DwL,gBAAS,WACpB,IAAOjE,EAAc+D,IAAd/D,WAEP,OACI,cAACgQ,GAAA,EAAD,CAAO/N,KAAMjC,EAAWgC,MAAMC,KAAMgO,QAASjQ,EAAWC,WAAY6H,KAAK,OAAzE,SACI,cAACkI,GAAA,EAAMhK,QAAP,UACKhG,EAAWgC,MAAM1L,Y,UCDnB2N,gBAAS,YAAyC,IAAjBnK,EAAgB,EAAhBA,QAC5C,OACI,cAACoO,EAAA,EAAD,UACI,eAAC0B,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAAC3B,EAAA,EAAK4D,MAAN,UACI,eAAC5D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKc,MAAN,CAAYC,QAAM,EAACwC,KAAK,QAAQjD,KAAY,OAAP/K,QAAO,IAAPA,OAAA,EAAAA,EAASmB,QAAS,qBACvD,cAACsJ,EAAA,EAAKyB,QAAN,CAAcyI,cAAc,SAA5B,SACI,cAACzH,EAAA,EAAD,CAAQtC,GAAG,KAAKvC,QAAO,OAAErI,QAAF,IAAEA,OAAF,EAAEA,EAASkB,uBAKlD,eAAC4O,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACI,eAACgK,GAAA,EAAU/H,MAAX,WACA,cAAC+H,GAAA,EAAD,CAAWpF,MAAM,YAAY5O,MAAK,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAASwB,iBAC7C,cAAC4U,GAAA,EAAD,CAAWpF,MAAM,YAAY5O,MAAK,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAASuB,oBAE7C,cAAC+L,GAAA,EAAD,IACA,cAAC,GAAD,CAActN,QAASA,e,oBCtB5B,SAASqW,GAAT,GAAsD,IAAlBC,EAAiB,EAAjBA,SACzCC,EAAU,CACZ3B,OAAQ,kBACRpH,YAAa,OACbgJ,aAAc,MACdC,WAAY,OACZjI,UAAW,SACX8F,OAAQ,KAORoC,EAASC,uBAAY,SAAAC,GAC1BN,EAASM,EAAMhJ,KAAI,SAACnO,GAAD,OACnBc,OAAOC,OAAOf,EAAM,CAChBoX,QAASC,IAAIC,gBAAgBtX,WAE/B,CAAC6W,IAEJ,EAAoDU,aAAY,CAACN,WAA1DO,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACE,gDAASF,KAAT,IAAyBhM,MAAOkM,EAAY,2BAAOZ,GAdlC,CACb/I,YAAY,UAa0D+I,EAA1E,UACE,qCAAWW,MACZ,cAAC7J,GAAA,EAAD,CAAMlC,KAAK,SAAS6C,KAAK,SACzB,cAACd,EAAA,EAAD,CAAQ7E,QAAQ,wB,qBC1BN,SAAS+O,GAAT,GAA8D,IAAjCC,EAAgC,EAAhCA,aAAaC,EAAmB,EAAnBA,WACrD,OACI,cAAC,KAAD,CACIvM,IAAKsM,EACLpM,MAAO,CAACqJ,OAAO,IAAKlI,MAAM,QAC1BmL,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCTlC,SAASC,GAAT,GAAmE,IAAvCC,EAAsC,EAAtCA,mBAAoBrR,EAAkB,EAAlBA,UAC3D,EAA0B+I,mBAAc,IAAxC,mBAAOkH,EAAP,KAAcN,EAAd,KACA,EAA8B5G,qBAA9B,mBAAOoI,EAAP,KAAgBR,EAAhB,KAcA,OANAzH,qBAAU,WACN,OAAO,WACH+G,EAAMtU,SAAQ,SAAC7C,GAAD,OAAeqX,IAAImB,gBAAgBxY,EAAKoX,eAE3D,CAACD,IAGA,eAAC9G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACI,cAACc,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAOjE,QAAQ,uBACjC,cAACgO,GAAD,CAA2BC,SAAUA,OAEzC,cAACxG,EAAA,EAAKC,OAAN,CAAa3D,MAAO,IACpB,eAAC0D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACI,cAACc,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAOjE,QAAQ,0BAChCuO,GAASA,EAAM7J,OAAS,GACrB,cAAC,GAAD,CAAoBuK,WAAYA,EAAYD,aAAcT,EAAM,GAAGC,aAG3E,cAAC/G,EAAA,EAAKC,OAAN,CAAa3D,MAAO,IACpB,eAAC0D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,EAApB,UACI,cAACc,EAAA,EAAD,CAAQ6B,KAAG,EAACzC,MAAM,OAAOjE,QAAQ,gCAChCuO,GAASA,EAAM7J,OAAS,GACrB,qCACI,qBAAK0E,UAAU,cAAcxG,MAAO,CAAEsE,UAAW,IAAK2I,SAAU,YAChE,eAAC9M,EAAA,EAAOiD,MAAR,WACI,cAACjD,EAAA,EAAD,CAAQ5F,QAASmB,EAAW8F,SAAU9F,EAAWoF,QAhCzE,WACQ+L,GACAA,EAAQK,mBAAmBC,QAAO,SAAAC,GAAI,OAAIL,EAAmBK,OA8BqBhN,UAAQ,EAACS,KAAK,UAChF,cAACV,EAAA,EAAD,CAAQqB,SAAU9F,EAAWoF,QAAS,kBAAMuK,EAAS,KAAKxK,KAAK,sBCrC5E3B,oBAAS,YAA2C,IAAD,EAAlBnK,EAAkB,EAAlBA,QAC5C,EAC6CiK,IADrC3B,aAAgBgQ,EAAxB,EAAwBA,cAAe9Y,EAAvC,EAAuCA,YAAamH,EAApD,EAAoDA,UAChDnB,EADJ,EACIA,QAAS3F,EADb,EACaA,aAAcC,EAD3B,EAC2BA,YAC3B,EAAqC4P,oBAAS,GAA9C,mBAAO6I,EAAP,KAAqBC,EAArB,KACA,EAA2B9I,mBAAS,IAApC,mBAAO+I,EAAP,KAAcC,EAAd,KAgBA,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAAC9I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACI,cAACc,EAAA,EAAD,CAAQyB,QAAQ,OAAO7C,KAAK,QAAQzD,QAAQ,WAC3CiQ,GACG,cAAClN,EAAA,EAAD,CAAQuD,QAAQ,QAAQnC,OAAK,EAACnE,QAASkQ,EAAe,SAAW,YAC7DxM,QAAS,WAAQyM,GAAcD,SAG3C,cAACzI,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACKmM,EACG,cAACR,GAAD,CAAmBC,mBA1BvC,SAA4BvY,GACxBD,EAAYC,GAAMlD,MAAK,kBAAMic,GAAa,OAyBiC7R,UAAWA,IAEtE,cAACsG,GAAA,EAAKoB,MAAN,CAAYwK,YAAa,EAAzB,mBACK7Y,EAAQqH,cADb,aACK,EAAgBuG,KACb,SAAAxG,GAAK,OACD,eAAC6F,GAAA,EAAD,WACI,cAAC1B,EAAA,EAAD,CAAOR,IAAK3D,EAAM/K,MACjBic,GACG,eAAClN,EAAA,EAAOiD,MAAR,CAAchC,OAAK,EAACuJ,OAAQ,EAA5B,UACI,cAACxK,EAAA,EAAD,CAAQoB,OAAK,EACbF,MAAM,QACNjE,QAAQ,OACR8C,KAAM/D,EAAMxI,GACZ6N,SAAUrF,EAAME,OAChB9B,QAASA,GAAW4B,EAAMxI,KAAO6Z,EACjC1M,QAAS,SAAAnJ,GAAC,OArCtD,SAA4BwE,EAAYxE,GACpC8V,EAAU9V,EAAEkW,cAAc3N,MAC1BtL,EAAauH,GAmCyC2R,CAAmB3R,EAAMxE,MAE3C,cAACwI,EAAA,EAAD,CAAQoB,OAAK,EACTF,MAAM,MACNR,KAAK,QACLX,KAAM/D,EAAMxI,GAAG,SACf6N,SAAUjH,GAAW4B,EAAMxI,GAAG,WAAa6Z,EAC3CjT,QAASA,GAAW4B,EAAMxI,GAAG,WAAa6Z,EAC1C1M,QAAS,SAAAnJ,GAAC,OAxCtD,SAA8BwE,EAAYxE,GACtC8V,EAAU9V,EAAEkW,cAAc3N,MAC1BrL,EAAYsH,EAAMxI,IAsCoCoa,CAAqB5R,EAAMxE,WAlB1CwE,EAAMxI,mBCnCtCuL,gBAAS,YAA2C,IAAnBnK,EAAkB,EAAlBA,QAC5C,EAAyDiK,IAAjD3B,aAAgBgQ,EAAxB,EAAwBA,cAAevY,EAAvC,EAAuCA,YACvC,EAAgC2P,oBAAS,GAAzC,mBAAOuJ,EAAP,KAAiBC,EAAjB,KACMC,EAAS,IAAI/X,EAAcpB,GAQjC,SAAS2T,IACLuF,GAAY,GAGhB,IAAM/G,EAAmBC,KAAW,CAChClR,YAAakR,OAAaC,SAAS,8BAGvC,OACI,cAACjE,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAACiK,GAAA,EAAIC,KAAL,UACI,eAAC9I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,UACI,cAACc,EAAA,EAAD,CAAQyB,QAAQ,OAAO7C,KAAK,OAAOzD,QAAS,iBAAWrI,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC/DoX,GACG,cAAClN,EAAA,EAAD,CAAQuD,QAAQ,QAAQnC,OAAK,EAACnE,QAAS4Q,EAAW,SAAW,aACzDlN,QAAS,WAAQmN,GAAaD,SAIzCA,EACG,cAACnJ,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAAC,KAAD,CAAQ6E,cAAekI,EAAQhH,iBAAkBA,EAC7Cf,SAAU,SAAC7O,GAAD,OA7BhB6W,EA6BsC7W,GA5BlDhD,SAAWS,EAAST,SAC1B9B,QAAQC,IAAI0b,QACZrZ,EAAYqZ,GAAO7c,MAAK,WAAQ2c,GAAY,MAHhD,IAAsBE,GA6B4CxF,oBAAkB,EAD5D,SAEK,gBAAGpC,EAAH,EAAGA,aAAc1P,EAAjB,EAAiBA,aAAcwQ,EAA/B,EAA+BA,QAASC,EAAxC,EAAwCA,MAAxC,OACG,eAAC1B,GAAA,EAAD,CAAMY,UAAU,UAAUL,SAAUI,EAAcE,aAAa,MAA/D,UACI,cAAClB,GAAD,CAAarF,KAAK,cAAcwG,YAAY,iBAC5C,cAACe,GAAD,CAAYvH,KAAK,MAAMwG,YAAY,MAAMgB,KAAM,IAC/C,cAACvH,EAAA,EAAD,CACIqB,SAAU3K,IAAiBwQ,IAAYC,EACvC5D,QAAQ,QAAQtD,UAAQ,EAACuG,KAAK,SAASvJ,QAAQ,SAAS7C,QAAS1D,IACrE,cAACsJ,EAAA,EAAD,CAAQuD,QAAQ,QAAQiD,KAAK,SAASvJ,QAAQ,SAAS0D,QAAS4H,YAMhF,cAAC7D,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,eAAC3B,EAAA,EAAD,WACI,cAACA,EAAA,EAAKyB,QAAN,UACI,cAACzB,EAAA,EAAKyC,OAAN,CAAatC,GAAG,KAAhB,gBACK5K,QADL,IACKA,OADL,EACKA,EAASkB,gBAGlB,cAACoM,GAAA,EAAD,IACA,cAAC7C,EAAA,EAAKyB,QAAN,iBACKlM,QADL,IACKA,OADL,EACKA,EAASqB,qBC7D/B8I,gBAAS,YAA6C,EAAjBhK,UAAkB,IAC3DmI,EAAgB2B,IAAhB3B,aACAtI,EAAmDsI,EAAnDtI,QAAS4G,EAA0C0B,EAA1C1B,WAAYC,EAA8ByB,EAA9BzB,iBAAiBC,EAAawB,EAAbxB,UAE7C,OACI,cAAC6R,GAAA,EAAIC,KAAL,CAAUpT,QAASqB,EAAnB,SACI,eAACiJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACc,EAAA,EAAD,CAAQyB,QAAQ,OAAO7C,KAAK,OAC5BzD,QAAuB,IAAdvB,EAAA,kCAAsC9G,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,sBAEb,cAAC4O,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACa,GAAA,EAAKoB,MAAN,CAAYwK,YAAa,EAAzB,SACKjS,EAAWgH,KAAI,SAAAhL,GACb,OAAO,cAAC,GAAD,CAA8B5C,QAAS4C,GAArBA,EAAErD,yBCdvC4K,gBAAS,YAA+C,IAAjBrL,EAAgB,EAAhBA,SAClD,OACI,eAACmO,GAAA,EAAD,CAAMrC,GAAIiB,IAAMf,GAAE,6BAAiBhM,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUF,IAA7C,UACI,cAAC2M,EAAA,EAAD,CAAOR,IAAG,wCAA4BjM,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAU8B,SAAtC,QAAsDyL,OAAK,IACrE,eAACY,GAAA,EAAKf,QAAN,WACI,cAACe,GAAA,EAAKC,OAAN,iBAAcpO,QAAd,IAAcA,OAAd,EAAcA,EAAU6B,QACxB,cAACsM,GAAA,EAAKE,YAAN,iBAAmBrO,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAU8B,oBCN9BuJ,gBAAS,YAAsD,EAApBhK,UAAqB,IACnEmI,EAAiB2B,IAAjB3B,aACAnD,EAAiCmD,EAAjCnD,WAAY0B,EAAqByB,EAArBzB,iBAEpB,OACI,cAAC8R,GAAA,EAAIC,KAAL,CAAUpT,QAASqB,EAAnB,SACI,cAACiJ,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACa,GAAA,EAAKoB,MAAN,CAAYwK,YAAa,EAAzB,SACK1T,EAAWyI,KAAI,SAAAhL,GACZ,OAAO,cAAC,GAAD,CAAgC9D,SAAU8D,GAAhBA,EAAEhE,kBCVhD,SAASya,GAAT,GAAuC,EAAhBrZ,QAAiB,IAC5CsI,EAAgB2B,IAAhB3B,aAEDgR,EAAQ,CACV,CAAEC,SAAU,gBAAiB1H,OAAQ,kBAAM,cAAC,GAAD,CAAwB1R,UAAU,aAC7E,CAAEoZ,SAAU,cAAe1H,OAAQ,kBAAM,cAAC,GAAD,CAAwB1R,UAAU,WAC3E,CAAEoZ,SAAU,UAAW1H,OAAQ,kBAAM,cAAC,GAAD,CAAwB1R,UAAU,cAG3E,OACI,cAACwY,GAAA,EAAIC,KAAL,UACI,eAAC9I,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACc,EAAA,EAAD,CAAQyB,QAAQ,OAAO7C,KAAK,WAAWzD,QAAQ,iBAEnD,cAACyH,EAAA,EAAKC,OAAN,CAAa3D,MAAO,GAApB,SACI,cAACuM,GAAA,EAAD,CACIa,KAAM,CAAEnN,OAAO,EAAM2C,UAAU,GAC/BsK,MAAOA,EACPG,YAAa,SAAC7W,EAAGpH,GAAU8M,EAAapB,kBAAkB1L,EAAKke,uBChBxE,SAAUC,GAAV,GAA2C,IAAjB3Z,EAAgB,EAAhBA,QAC9BsI,EAAgB2B,IAAhB3B,aAEDgR,EAAQ,CACV,CAACC,SAAU,QAAS1H,OAAQ,kBAAM,cAAC,GAAD,CAAc7R,QAASA,MACzD,CAACuZ,SAAU,SAAU1H,OAAQ,kBAAM,cAAC,GAAD,CAAc7R,QAASA,MAC1D,CAACuZ,SAAU,SAAU1H,OAAQ,kBAAM,cAACwH,GAAD,CAAcrZ,QAASA,MAC1D,CAACuZ,SAAU,YAAa1H,OAAQ,kBAAM,cAAC,GAAD,CAAkB1R,UAAW,gBACnE,CAACoZ,SAAU,YAAa1H,OAAQ,kBAAM,cAAC,GAAD,CAAkB1R,UAAW,iBAGvE,OACI,cAACwY,GAAA,EAAD,CACIa,KAAM,CAACnN,OAAM,EAAM2C,UAAS,GAC5B4K,aAAa,QACbN,MAAOA,EACPG,YAAa,SAAC7W,EAAEpH,GAAU8M,EAAatB,aAAaxL,EAAKke,gBCnBtDvP,oBAAS,WACpB,IAAO5K,EAAYkU,eAAZlU,SACA+I,EAAgB2B,IAAhB3B,aACAnB,EAAoDmB,EAApDnB,YAAanH,EAAuCsI,EAAvCtI,QAAQ0G,EAA+B4B,EAA/B5B,eAAeM,EAAgBsB,EAAhBtB,aAO3C,OALA6I,qBAAU,WAEN,OADA1I,EAAY5H,GACL,WAAOyH,EAAa,MAC7B,CAACG,EAAY5H,EAASyH,IAEpBN,EAAuB,cAAC8L,GAAD,CAAkBnK,QAAQ,uBAGjD,cAACyH,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,OAAN,CAAa3D,MAAM,KAAnB,UACI,cAAC,GAAD,CAAepM,QAASA,IACxB,cAAC2Z,GAAD,CAAgB3Z,QAASA,Y,2BClB1B,SAAS6Z,GAAT,GAA4D,IAA1BC,EAAyB,EAApCC,UAAwBC,EAAY,mBACpD5P,EAAeH,IAA1B9G,UAAWiH,WAClB,OACI,cAAC,KAAD,2BACQ4P,GADR,IAEInI,OAAQ,SAACpB,GAAD,OAAWrG,EAAa,cAAC0P,EAAD,eAAerJ,IAAY,cAAC,KAAD,CAAU3F,GAAG,UCgDrEX,oBAxCf,WACE,IAAM8P,EAAWC,eACjB,EAAkCjQ,IAA1BhN,EAAR,EAAQA,YAAakG,EAArB,EAAqBA,UAOrB,OALA0M,qBAAU,WACR5S,EAAYF,MAAQoG,EAAUoD,iBAAiBgL,QAAQtU,EAAYgL,cACjEhL,EAAYgL,iBACd,CAAChL,EAAYkG,IAEVlG,EAAY6K,UAGf,eAAC,WAAD,WACE,cAAC,IAAD,CAAgBwD,SAAS,eAAe6O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOxP,OAAK,EAACyP,KAAK,IAAIL,UAAWM,KACjC,cAAC,KAAD,CACED,KAAM,QACNvI,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACrH,EAAA,EAAD,CAAWS,MAAO,CAAEgE,UAAW,OAA/B,SACE,eAAC,KAAD,WACA,cAAC,KAAD,CAAOmL,KAAK,SAASL,UAAWO,KAC9B,cAACT,GAAD,CAAclP,OAAK,EAACyP,KAAK,cAAcL,UAAWQ,KAClD,cAACV,GAAD,CAAcO,KAAK,kBAAkBL,UAAWS,KAChD,cAACX,GAAD,CAAcO,KAAK,aAAaL,UAAWU,KAC3C,cAACZ,GAAD,CAAiCO,KAAM,CAAC,kBAAmB,eAAgBL,UAAWW,IAAnET,EAAS/b,KAC5B,cAAC,KAAD,CAAOkc,KAAK,gBAAgBL,UAAWY,KACvC,cAAC,KAAD,CAAOP,KAAK,sBAAsBL,UAAWa,KAC7C,cAAC,KAAD,CAAOb,UAAWhE,mBArBG,cAACvD,GAAD,CAAkBnK,QAAQ,0BChBhDwS,I,qBAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxe,MAAK,YAAkD,IAA/Cye,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,Q,SCNC,SAASO,KACtB,IAAQC,EAAapB,eAAboB,SAMR,OAJAzL,qBAAU,WACR9H,OAAOwT,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAMvd,GAAUyd,eAEvBC,IAAS5J,OACP,cAAC9H,EAAa2R,SAAd,CAAuBtZ,MAAOpF,EAA9B,SACE,eAAC,KAAD,CAAQe,QAASA,GAAjB,UACE,cAACsd,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.b8bde90c.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber = 1;\r\n    pageSize = 2;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { store } from '../stores/store';\r\nimport {User,UserFormValues} from '../models/user'\r\nimport { Photo, Profile } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { ProfileActivity } from '../models/profileActivity';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url,body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\n// const sleep = (delay: number) => {\r\n//     return new Promise((e) => {\r\n//         setTimeout(e, delay);\r\n//     })\r\n// }\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(\r\n    async response => {\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination){\r\n            response.data = new PaginatedResult(response.data,JSON.parse(pagination));\r\n            return response  as AxiosResponse<PaginatedResult<any>>;\r\n        };\r\n        return response;\r\n    }, (error: AxiosError) => {\r\n        const { data, status, config } = error.response!;\r\n        console.log('axios intercepts');\r\n        switch (status) {\r\n            case 400:\r\n                if (typeof data === 'string'){\r\n                    toast.error(data);\r\n                }\r\n                if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                    history.push('/not-found');\r\n                }\r\n                console.log(data);\r\n                if (data.errors) {\r\n                    const modalStateErrors = [];\r\n                    for (const key in data.errors) {\r\n                        if (data.errors[key]) {\r\n                            modalStateErrors.push(data.errors[key]);\r\n                        }\r\n                    }\r\n                    throw modalStateErrors.flat();\r\n                }\r\n                else {\r\n                    toast.error(data);\r\n                }\r\n\r\n                break;\r\n            case 401:\r\n                toast.error('unauthorized');\r\n                break;\r\n            case 404:\r\n                history.push('/notfound');\r\n                break;\r\n            case 500:\r\n                store.commonStore.setServerError(data);\r\n                history.push('/server-error')\r\n                break;\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n\r\nconst Activities = {\r\nlist: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities',{params}).then(responseBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities/', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => request.del<void>(`/activities/${id}`),\r\n    attend: (id:string) => request.post<void>(`/activities/${id}/attend`,{})\r\n}\r\n\r\nconst Account = {\r\n    current: () => request.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login',user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register',user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username:string)=> request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file:Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File',file)\r\n        return axios.post<Photo>('photo', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photo/${id}/setMain`,{}),\r\n    deletePhoto: (id: string) => request.del(`/photo/${id}`),\r\n    updateAbout: (profile: Profile) => request.post<void>(`/profiles/updateAbout`,profile),\r\n    updateFollowing: (username:string) => request.post<void>(`/follow/${username}`,{}),\r\n    listFollowing: (username:string, predicate:string) => request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getProfileActivities: (username:string, predicate:string) => \r\n        request.get<ProfileActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile'\r\n\r\nexport interface Activity {\r\n  id: string\r\n  title: string\r\n  date: Date | null\r\n  description: string\r\n  category: string\r\n  city: string\r\n  venue: string\r\n  hostUsername?: string\r\n  isCancelled?: boolean\r\n  isGoing: boolean\r\n  isHost: boolean\r\n  host?: Profile\r\n  attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n  constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined\r\n  title: string = ''\r\n  category: string = ''\r\n  description: string = ''\r\n  date: Date | null = null\r\n  city: string = ''\r\n  venue: string = ''\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id\r\n      this.title = activity.title\r\n      this.category = activity.category\r\n      this.description = activity.description\r\n      this.date = activity.date\r\n      this.city = activity.city\r\n      this.venue = activity.venue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username: string\r\n    displayName: string\r\n    image?:string\r\n    bio?:string\r\n    following: boolean\r\n    followingCount: number\r\n    followersCount: number\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id: string\r\n    url: string\r\n    isMain: boolean\r\n    \r\n}\r\n\r\nexport class ProfileAbouts {\r\n    username: string = ''\r\n    displayName: string = ''\r\n    bio: string | undefined\r\n    following: boolean = false\r\n    followingCount: number = 0\r\n    followersCount: number = 0\r\n\r\n    constructor(profile: Profile){\r\n        if (profile){\r\n            this.username = profile.username;\r\n            this.displayName = profile.displayName;\r\n            this.bio = profile.bio;\r\n            this.following = profile.following;\r\n            this.followersCount = profile.followersCount;\r\n            this.followingCount = profile.followingCount;\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction, } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\"\r\nimport { v4 as uuid } from 'uuid'\r\nimport { format } from 'date-fns'\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<String, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    isEditMode: boolean = false;\r\n    isSubmitting: boolean = false;\r\n    loadingInitial: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadAcitivites();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((val, key) => {\r\n                if (key !== 'startDate') { this.predicate.delete(key) }\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((val, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (val as Date).toISOString());\r\n            } else {\r\n                params.append(key, val);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    get activities() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activities.reduce((_activities, _activity) => {\r\n                const date = format(_activity.date!, 'dd MMM yyyy')\r\n                _activities[date] = _activities[date] ? [..._activities[date], _activity] : [_activity]\r\n                return _activities\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    setLoading(loading: boolean) {\r\n        this.loadingInitial = loading\r\n    }\r\n\r\n    setEditMode(isEdit: boolean) {\r\n        this.isEditMode = isEdit\r\n    }\r\n\r\n    loadAcitivites = async () => {\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams)\r\n\r\n            result.data.forEach(e => {\r\n                this.setActivity(e)\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoading(false);\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await (await agent.Activities.details(id));\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n\r\n                this.setLoading(false);\r\n                return activity;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                this.setLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity(id: string) {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity(activity: Activity) {\r\n        var user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees?.some(x => x.username === user?.username)\r\n            activity.isHost = activity.hostUsername === user.username\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\r\n        }\r\n\r\n        activity.date = new Date(activity.date!)\r\n        this.activityRegistry.set(activity.id, activity)\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            activity.id = uuid()\r\n            await agent.Activities.create(activity)\r\n            var newActivity = new Activity(activity)\r\n            newActivity.hostUsername = user?.username\r\n            newActivity.attendees = [attendee]\r\n            this.setActivity(newActivity)\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity)\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n                    this.selectedActivity = updatedActivity as Activity\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.isSubmitting = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.isSubmitting = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            // this.activities = [...this.activities.filter(x => x.id !== id)]\r\n            this.activityRegistry.delete(id);\r\n            runInAction(() => {\r\n                this.isSubmitting = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.isSubmitting = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        var user = store.userStore.user;\r\n        this.isSubmitting = true\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity!.attendees =\r\n                        this.selectedActivity?.attendees?.filter(x => x.username !== user?.username)\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else {\r\n                    const attendee = new Profile(user!)\r\n                    this.selectedActivity?.attendees?.push(attendee)\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            this.isSubmitting = false\r\n        }\r\n\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.isSubmitting = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            }\r\n            )\r\n        } catch (error) {\r\n\r\n        }\r\n        finally {\r\n            runInAction(() => this.isSubmitting = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(e => {\r\n            e.attendees.forEach(at => {\r\n                if (at.username === username) {\r\n                    at.following ? at.followersCount-- : at.followersCount++;\r\n                    at.following = !at.following\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { User, UserFormValues } from \"../models/user\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from '../api/agent';\r\nimport { store } from \"./store\";\r\nimport { history } from \"../..\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try \r\n        {\r\n            const result = await agent.Account.login(creds);\r\n            store.commonStore.setToken(result.token);\r\n            runInAction(() => this.user = result);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.token = null;\r\n        this.user = null;\r\n        localStorage.removeItem('jwt');\r\n        history.push('/');\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        try{\r\n            const result = await agent.Account.current();\r\n            runInAction(() =>{this.user = result});\r\n        } catch (error) { \r\n            console.log(error);\r\n        }\r\n       \r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try{\r\n            const result = await agent.Account.register(creds);\r\n            store.commonStore.setToken(result.token);\r\n            runInAction(() => this.user = result);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }catch (error) { \r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n}","import { Photo, Profile } from '../models/profile';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx'\r\nimport agent from \"../api/agent\";\r\nimport { store } from './store';\r\nimport { ProfileActivity } from '../models/profileActivity';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    activities: ProfileActivity[] = [];\r\n    loadingFollowing: boolean = false;\r\n    activeTab:number = 0;\r\n\r\n    activeEventTab:number = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            at => {\r\n                if (at === 3 || at === 4) {\r\n                    const predicate = at === 3 ? 'followers' : 'following'\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else if (at === 2) {\r\n                    this.clearProfileActivities();\r\n                    var predicate = \"\";\r\n                    switch (at.toString()){\r\n                        case \"0\":\r\n                           predicate = 'future';\r\n                            break;\r\n                        case \"1\":\r\n                            predicate = 'past';\r\n                            break;\r\n                        case \"2\":\r\n                            predicate = 'isHost';\r\n                            break;\r\n                    }\r\n\r\n                    this.loadProfileEvents(predicate);\r\n                }\r\n                else {\r\n                    this.clearFollowings();\r\n                }\r\n            }\r\n        );\r\n\r\n        reaction(\r\n            () => this.activeEventTab,\r\n            at => {\r\n                var predicate = \"\";\r\n                this.clearProfileActivities();\r\n                switch (at.toString()){\r\n                    case \"0\":\r\n                       predicate = 'future';\r\n                        break;\r\n                    case \"1\":\r\n                        predicate = 'past';\r\n                        break;\r\n                    case \"2\":\r\n                        predicate = 'isHost';\r\n                        break;\r\n                }\r\n\r\n                this.loadProfileEvents(predicate)\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (tabIndex:any) => {\r\n        this.activeTab = tabIndex;\r\n    }\r\n\r\n    setActiveEventTab = (tabIndex:any) => {\r\n        this.activeEventTab = tabIndex;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            this.profile = profile;\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo)\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url)\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(\r\n                () => this.uploading = false\r\n            )\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id)\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(x => x.isMain === true)!.isMain = false;\r\n                    this.profile.photos.find(x => x.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(\r\n                () => this.loading = false\r\n            )\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photoId: string) => {\r\n        this.loading = true\r\n        try {\r\n            await agent.Profiles.deletePhoto(photoId)\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(x => x.id !== photoId)\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(\r\n                () => this.loading = false\r\n            )\r\n        }\r\n    }\r\n\r\n    updateAbout = async (profile: Profile) => {\r\n        try {\r\n            await agent.Profiles.updateAbout(profile)\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.displayName = profile.displayName\r\n                    this.profile.bio = profile.bio\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(e => {\r\n                    if (e.username === username) {\r\n                        e.following ? e.followersCount-- : e.followersCount++;\r\n                        e.following = !e.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowing = true;\r\n        try {\r\n            const following = await agent.Profiles.listFollowing(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = following;\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            runInAction(() => {\r\n                this.loadingFollowing = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearFollowings = () => {\r\n        this.followings = []\r\n    }\r\n\r\n    clearProfileActivities = () => {\r\n        this.activities = []\r\n    }\r\n\r\n    loadProfileEvents = async (predicate:string) => {\r\n        this.loadingFollowing = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.getProfileActivities(this.profile!.username, predicate);\r\n            console.log(activities);\r\n            runInAction(() => {\r\n                this.activities = activities;\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            runInAction(() => {\r\n                this.loadingFollowing = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n}","import { createContext, useContext } from 'react'\r\nimport ActivityStore from './activityStore'\r\nimport CommonStore from './commonStore'\r\nimport UserStore from './userStore'\r\nimport ModalStore from './modalStore'\r\nimport ProfileStore from './profilesStore'\r\nimport CommentStore from './commentStore'\r\n\r\ninterface Store{\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    profileStore: ProfileStore\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext)\r\n}","import { ServerError } from \"../models/serverError\";\r\nimport {makeAutoObservable, reaction} from \"mobx\"\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt',token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string  | null) => {\r\n        if (token) window.localStorage.setItem('jwt',token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import {makeAutoObservable} from 'mobx'\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { ChatComment } from '../models/comment'\r\nimport { HubConnectionBuilder, HubConnection, LogLevel } from '@microsoft/signalr'\r\nimport { makeAutoObservable, runInAction } from \"mobx\"\r\nimport { store } from './store'\r\n\r\n\r\nexport default class CommentStore {\r\n    comment: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n                this.hubConnection?.start().catch(error => console.log('error establishing connection:', error))\r\n\r\n                this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                    comments.forEach(e => \r\n                        e.createdAt = new Date(e.createdAt + 'Z')\r\n                        );\r\n\r\n                    runInAction(() => this.comment = comments);\r\n                })\r\n\r\n                this.hubConnection?.on('ReceiveComment', (comments: ChatComment) => {\r\n                    comments.createdAt = new Date(comments.createdAt);\r\n                    runInAction(() => this.comment.unshift(comments));\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        if (this.hubConnection !== null) {\r\n            this.hubConnection.stop().catch(error => console.log('error closing connection:', error))\r\n        }\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comment = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke(\"SendComment\",values);\r\n        }catch (error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        // computer navbar\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item header exact as={NavLink} to='/'>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name=\"Activities\" as={NavLink} to='/activities' />\r\n                {/* <Menu.Item name=\"Test Error\" as={NavLink} to='/testerror' /> */}\r\n                <Menu.Item>\r\n                    <Button positive content={\"create activity\"} as={NavLink} to='/createActivity' />\r\n                </Menu.Item>\r\n                {isLoggedIn ? (\r\n                    <Menu.Item position='right'>\r\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                        <Dropdown pointing='top left' text={user?.displayName}>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                                <Dropdown.Item onClick={logout} text='Logout' icon='user' />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                ) : <Container/> }\r\n\r\n            </Container>\r\n        </Menu>\r\n\r\n        // tablet/phone navbar\r\n    )\r\n})","import React, { SyntheticEvent } from 'react'\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\r\n    }\r\n\r\n    if (userStore.user?.username === profile?.username) return null;\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal'\r\n                    content={profile?.following\r\n                        ? 'Following' : 'Not Following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button fluid basic\r\n                    color={profile?.following ? 'red' : 'green'}\r\n                    content={profile?.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    disabled={loading}\r\n                    onClick={(e) => {\r\n                        handleFollow(e, profile?.username)\r\n                    }}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n\r\n","import React from 'react'\r\nimport {Profile} from '../../app/models/profile'\r\nimport {observer} from 'mobx-react-lite'\r\nimport {Card, Icon, Image, Divider} from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nfunction truncate(str : string = '', n : number){\r\n    if (str != null) {\r\n        return (str.length > n) ? str.substr(0, n-1) + '...' : str;\r\n    }\r\n  };\r\n\r\nexport default observer(function ProfileCard({profile}:Props){\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio,30)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n               {profile.followersCount} followers\r\n               <Divider />\r\n               <FollowButton profile={profile} />\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import React from 'react'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport { Link } from 'react-router-dom'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n    \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((e) => (\r\n                <Popup key={e.username} hoverable\r\n                    trigger={\r\n                        <List.Item key={e.username} as={Link} to={`/profiles/${e.username}`}>\r\n                            <Image size='mini' \r\n                            circular src={e.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={e.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={e} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns'\r\nimport ActivityItemListAttendee from './ActivityListItemAttendee'\r\n\r\ninterface props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityItemList({ activity }: props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label color='red' attached='top' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Content>\r\n                                Hosted By\r\n                                <Link to={`/Profiles/${activity.hostUsername}`}> {activity.host?.displayName}</Link>\r\n                                {activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='orange'>\r\n                                            Your are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )}\r\n\r\n                                {!activity.isHost && activity.isGoing && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='green'>\r\n                                            Your are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityItemListAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore()\r\n    const { groupedActivities } = activityStore\r\n\r\n    return (\r\n        <>\r\n            {\r\n                groupedActivities.map(([group, groupVal]) => (\r\n                    <Fragment key={group}>\r\n                        <Header sub color='teal'>\r\n                            {group}\r\n                        </Header>\r\n                        {groupVal.map(e => (\r\n                            <ActivityListItem key={e.id} activity={e} />\r\n                        ))}\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport { Menu, Header } from 'semantic-ui-react'\r\nimport Calendar from 'react-calendar'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 26 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => {setPredicate('startDate',date as Date)}}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react'\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilter from './ActivityFilter'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useState } from 'react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadAcitivites, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadAcitivites().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadAcitivites()\r\n    }, [activityRegistry, loadAcitivites])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}>\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilter />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field}{...props} />\r\n            {meta.touched && meta.error ?\r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport MyTextInput from '../../app/common/MyTextInput';\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    var { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, {setErrors,setSubmitting}) => {\r\n                userStore.login(values)\r\n                .catch((error) => setErrors({error:'Invalid email or password'}))\r\n                .finally(() => setSubmitting(false))\r\n            }}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' autoComplete='off' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />\r\n                        }\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any\r\n}\r\n\r\nexport default function ValidationError({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i:any) => {\r\n                        return <Message.Item key={i}>{err}</Message.Item>\r\n                    })}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport MyTextInput from '../../app/common/MyTextInput';\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationError from '../errors/ValidationError'\r\n\r\nexport default observer(function RegisterForm() {\r\n    var { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors, setSubmitting }) => {\r\n                userStore.register(values)\r\n                    .catch((error) => \r\n                    {\r\n                    setErrors({ error })}\r\n                    ).finally(() => setSubmitting(false))\r\n                \r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                password: Yup.string().required(),\r\n                email: Yup.string().required().email()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' autoComplete='off' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Register Reactivities Account' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationError errors={errors.error} />\r\n                            // <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />\r\n                        }\r\n                    />\r\n                    <Button loading={isSubmitting} disabled={!isValid || !dirty || isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Segment, Header, Image, Button } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore,modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt=\"logo\" style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n\r\n                {userStore.isLoggedIn ? (\r\n                <>\r\n                    <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                    <Button as={Link} to='/activities' size='huge' inverted>\r\n                        Go To Reactivities!\r\n                    </Button>\r\n                </> )\r\n                : ( <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Log Me In!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                        Register!\r\n                    </Button>\r\n                </>)}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react'\r\nimport {Dimmer,Loader} from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    inverted?:boolean;\r\n    content?:string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = false, content='Loading..'}:Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field}{...props} rows={props.rows}/>\r\n            {meta.touched && meta.error ?\r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label, Select } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    options: any\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n            clearable \r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e,d) => {\r\n                helpers.setValue(d.value)\r\n            }}\r\n            onBlur={()=>helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ?\r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(value) => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ?\r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const CategoryOptions = [\r\n    {text:'Drinks', value:'drinks'},\r\n    {text:'Culture', value:'cutlure'},\r\n    {text:'FIlm', value:'film'},\r\n    {text:'Food', value:'food'},\r\n    {text:'Music', value:'music'},\r\n    {text:'Travel', value:'travel'}\r\n]","import { Formik, Form } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/MyTextInput'\r\nimport MyTextArea from '../../../app/common/MyTextArea'\r\nimport MySelectInput from '../../../app/common/MySelectInput'\r\nimport MyDateInput from '../../../app/common/MyDateInput'\r\n\r\nimport {CategoryOptions} from '../../../app/common/options/CategoryOptions'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory()\r\n    const { activityStore } = useStore()\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Activity title is required'),\r\n        description: Yup.string().required('Description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is Required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then(\r\n                (e) => {\r\n                    setActivity(new ActivityFormValues(e))\r\n                }\r\n            )\r\n        };\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity:ActivityFormValues) {\r\n        if(activity.id){\r\n            updateActivity(activity).then(\r\n                () => history.push(`/activities/${activity.id}`)\r\n            )\r\n        }\r\n        else\r\n        {\r\n            createActivity(activity).then(\r\n                () => history.push(`/activities/${activity.id}`)\r\n            )\r\n        }\r\n    }\r\n\r\n    function handleCancel() {\r\n        activity.id ? history.push(`/activities/${activity.id}`) : history.push('/activities')\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header sub color='teal' content='Activity Details' />\r\n            <Formik validationSchema={validationSchema}\r\n                enableReinitialize initialValues={activity}\r\n                onSubmit={(values) => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isSubmitting,isValid,dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea  rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={CategoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                        placeholderText='Date' \r\n                        name='date'\r\n                        showTimeSelect\r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                         <Header sub color='teal' content='Location Details' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled = {isSubmitting||!isValid|| !dirty}\r\n                            floated='right' positive type='submit' content='Submit' loading={isSubmitting} />\r\n                        <Button floated='right' type='button' content='Cancel' onClick={handleCancel} />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns'\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, isSubmitting, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                            {activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? \"green\" : \"red\"}\r\n                            floated='left' basic\r\n                            content={activity.isCancelled ? \"Re-Activate Activity\" : \"Cancel Activity\"}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={isSubmitting}\r\n                        />\r\n                        <Button color='orange' floated='right' as={Link} to={`/manage/${activity.id}`}\r\n                            disabled={activity.isCancelled}>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={isSubmitting} disabled={isSubmitting}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button color='teal' onClick={updateAttendance} loading={isSubmitting} disabled={isSubmitting}>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailContent({activity}: Props){\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props{\r\n    activity: Activity\r\n    }\r\n\r\nexport default observer(function ActivityDetailSidebar({activity:{attendees,host}}:Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length.toString()} {attendees.length === 1 ? \"Person\":\"People\"} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((e)=> (\r\n                         <Item style={{ position: 'relative' }} key={e.username}>\r\n                             {e.username === host?.username && (\r\n                                  <Label\r\n                                  style={{ position: 'absolute' }}\r\n                                  color='orange'\r\n                                  ribbon='right'\r\n                              >\r\n                                  Host\r\n                              </Label>\r\n                             )}\r\n                         <Image size='tiny' src={e.image || '/assets/user.png'} />\r\n                         <Item.Content verticalAlign='middle'>\r\n                             <Item.Header as='h3'>\r\n                                 <Link to={`/profiles/${e.username}`}>{e.displayName}</Link>\r\n                             </Item.Header>\r\n                             {e.following && (\r\n                                 <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                             )} \r\n                         </Item.Content>\r\n                     </Item>\r\n                    ))}\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { Formik,Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailChat({ activityId }: props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    const validationSchema = Yup.object({\r\n        body: Yup.string().required('Comment cannot be empty')\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    {commentStore.comment.map(comment => (\r\n                        <Comment key={comment.id.toString()}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace:'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    <Formik validationSchema={validationSchema}\r\n                        onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps)=> (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment' \r\n                                                rows={2} \r\n                                                {...props.field}\r\n                                                onKeyPress={e=> {\r\n                                                    if (e.key=== 'Enter' && e.shiftKey ){\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key=== 'Enter'&& !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailHeader from './ActivityDetailHeader'\r\nimport ActivityDetailContent from './ActivityDetailContent'\r\nimport ActivityDetailSidebar from './ActivityDetailSidebar'\r\nimport ActivityDetailChat from './ActivityDetailChat'\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) { \r\n            loadActivity(id);\r\n            return () => clearSelectedActivity();\r\n        };\r\n    }, [id, loadActivity,clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n       <Grid>\r\n           <Grid.Column width={10}>\r\n                <ActivityDetailHeader activity={activity}/>\r\n                <ActivityDetailContent activity={activity}/>\r\n                <ActivityDetailChat activityId={activity.id} />\r\n           </Grid.Column>\r\n           <Grid.Column width={6}>\r\n                <ActivityDetailSidebar activity={activity} />\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationError from './ValidationError'\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setError] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        console.log(\"bad guid clicked\");\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => \r\n            {\r\n                console.log(\"bad guid processed\");\r\n                console.log(err)\r\n            }\r\n            );\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setError(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n\r\n            {errors &&\r\n                <ValidationError errors={errors} />\r\n            }\r\n\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - Not Found\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React from 'react'\r\nimport { Container, Header } from 'semantic-ui-react';\r\nimport {useStore} from '../../app/stores/store'\r\nimport {Segment} from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details??\r\n                <Segment>\r\n                    <Header as='h4' content='Stack Trace' color='teal' />\r\n                    <code style={{marginTop:'10px'}}>{commonStore.error?.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React from 'react'\r\nimport { useStore } from '../../stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Modal } from 'semantic-ui-react';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Grid, Item, Segment, Header, Statistic, Divider } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}:props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile?.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group>\r\n                    <Statistic label='Followers' value={profile?.followersCount}/>\r\n                    <Statistic label='Following' value={profile?.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface props{\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoUploadWidgetDropZone({setFiles}:props) {\r\n    const dzStyle = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200, \r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor:'green'\r\n    }\r\n\r\n  const onDrop = useCallback(files => {\r\n   setFiles(files.map((file:any) => \r\n   Object.assign(file, {\r\n       preview: URL.createObjectURL(file)\r\n   })))\r\n  }, [setFiles])\r\n  \r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyle,...dzActive} : dzStyle }>\r\n      <input {...getInputProps()} />\r\n     <Icon name='upload' size='huge' />\r\n     <Header content='Drop Image Here' />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface props{\r\n    imagePreview: string,\r\n    setCropper: (cropper: Cropper) => void\r\n}\r\n\r\nexport default function PhotoUploadCropper({imagePreview,setCropper}:props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height:200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoUploadWidgetDropZone from './PhotoUploadWidgetDropZone'\r\nimport PhotoUplaodCropper from './PhotoUploadCropper'\r\n\r\ninterface props{\r\n    uploadPhotoHandler: (file:Blob) => void;\r\n    uploading: boolean\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploadPhotoHandler, uploading}:props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhotoHandler(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 1 - Add Photo' />\r\n                <PhotoUploadWidgetDropZone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoUplaodCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 1 - Preview and Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group>\r\n                            <Button loading={uploading} disabled={uploading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={uploading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { useState } from 'react';\r\nimport { Tab, Header, Card, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/ImageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhoto({ profile }: props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\r\n        loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setPhotoMode] = useState(false);\r\n    const [target,setTarget] = useState('');\r\n\r\n    function uploadPhotoHandler(file: Blob) {\r\n        uploadPhoto(file).then(() => setPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo:Photo,e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleSetDeletephoto(photo:Photo,e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo.id);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => { setPhotoMode(!addPhotoMode) }} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhotoHandler={uploadPhotoHandler} uploading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(\r\n                                photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button basic \r\n                                                color='green' \r\n                                                content='Main' \r\n                                                name={photo.id} \r\n                                                disabled={photo.isMain}\r\n                                                loading={loading && photo.id === target}\r\n                                                onClick={e => handleSetMainPhoto(photo,e)}\r\n                                                />\r\n                                            <Button basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                name={photo.id+\"delete\"} \r\n                                                disabled={loading && photo.id+\"delete\" === target}\r\n                                                loading={loading && photo.id+\"delete\" === target}\r\n                                                onClick={e => handleSetDeletephoto(photo,e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { useState } from 'react'\r\nimport { Tab, Header, Grid, Button, Form, Segment, Item, Divider } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/MyTextInput';\r\nimport MyTextArea from '../../app/common/MyTextArea';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport { Formik } from 'formik';\r\nimport { Profile, ProfileAbouts } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: props) {\r\n    const { profileStore: { isCurrentUser, updateAbout } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n    const abouts = new ProfileAbouts(profile!);\r\n\r\n    function handleSubmit(about: ProfileAbouts) {\r\n        about.username = profile!.username;\r\n        console.log(about);\r\n        updateAbout(about).then(() => { setEditMode(false) });\r\n    }\r\n\r\n    function handleCancel() {\r\n        setEditMode(false);\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('Display Name is required')\r\n    })\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Tab.Pane>\r\n                <Grid>\r\n                    <Grid.Column width={16}>\r\n                        <Header floated='left' icon='user' content={'About ' + profile?.displayName} />\r\n                        {isCurrentUser && (\r\n                            <Button floated='right' basic content={editMode ? 'Cancel' : 'Edit About'}\r\n                                onClick={() => { setEditMode(!editMode) }} />\r\n                        )}\r\n                    </Grid.Column>\r\n\r\n                    {editMode ? (\r\n                        <Grid.Column width={16}>\r\n                            <Formik initialValues={abouts} validationSchema={validationSchema}\r\n                                onSubmit={(val) => handleSubmit(val)} enableReinitialize>\r\n                                {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                                        <MyTextInput name='displayName' placeholder='Display Name' />\r\n                                        <MyTextArea name='bio' placeholder='Bio' rows={3} />\r\n                                        <Button\r\n                                            disabled={isSubmitting || !isValid || !dirty}\r\n                                            floated='right' positive type='submit' content='Submit' loading={isSubmitting} />\r\n                                        <Button floated='right' type='button' content='Cancel' onClick={handleCancel} />\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </Grid.Column>\r\n                    ) : (\r\n                        <Grid.Column width={16}>\r\n                            <Item>\r\n                                <Item.Content>\r\n                                    <Item.Header as='h3'>\r\n                                        {profile?.displayName}\r\n                                    </Item.Header>\r\n                                </Item.Content>\r\n                                <Divider />\r\n                                <Item.Content>\r\n                                    {profile?.bio}\r\n                                </Item.Content>\r\n                            </Item>\r\n                        </Grid.Column>\r\n                    )}\r\n                </Grid>\r\n            </Tab.Pane>\r\n        </Segment>\r\n    )\r\n})","import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store';\r\nimport {Card, Grid, Header, Tab} from 'semantic-ui-react'\r\nimport ProfileCard from './ProfileCard';\r\n\r\ninterface props{\r\n    predicate:string;\r\n}\r\n\r\nexport default observer(function ProfileFollowings({predicate}:props){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowing,activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowing}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' \r\n                    content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} are following`} />\r\n                </Grid.Column> \r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(e => {\r\n                           return <ProfileCard key={e.username} profile={e} />\r\n                        })}\r\n                    </Card.Group>\r\n                </Grid.Column> \r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Image } from 'semantic-ui-react'\r\nimport { ProfileActivity } from '../../app/models/profileActivity'\r\n\r\ninterface Props{\r\n    activity?: ProfileActivity\r\n}\r\n\r\nexport default observer(function ProfileActivityCard({activity}:Props){\r\n    return(\r\n        <Card as={Link} to={`/activities/${activity?.id}`}>\r\n            <Image src={`/assets/categoryImages/${activity?.category}.jpg`} fluid />\r\n            <Card.Content>\r\n                <Card.Header>{activity?.title}</Card.Header>\r\n                <Card.Description>{activity?.category}</Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Card, Grid, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivityCard from './ProfileActivityCard';\r\n\r\ninterface props {\r\n    predicate: string;\r\n}\r\n\r\nexport default observer(function ProfileEventActivities({ predicate }: props) {\r\n    const { profileStore } = useStore();\r\n    const { activities, loadingFollowing } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowing}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {activities.map(e => {\r\n                            return <ProfileActivityCard key={e.id} activity={e} />\r\n                        })}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react'\r\nimport { Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEventActivities from './ProfileEventActivities'\r\n\r\ninterface props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default function ProfileEvent({profile}:props) {\r\n    const {profileStore} = useStore();\r\n    \r\n    const panes = [\r\n        { menuItem: 'Future Events', render: () => <ProfileEventActivities predicate='future' /> },\r\n        { menuItem: 'Past Events', render: () => <ProfileEventActivities predicate='past' /> },\r\n        { menuItem: 'Hosting', render: () => <ProfileEventActivities predicate='isHost' /> },\r\n    ]\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ fluid: true, vertical: false }}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => {profileStore.setActiveEventTab(data.activeIndex) }}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}","import React from 'react'\r\nimport {Tab} from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport ProfilePhoto from './ProfilePhotos'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileFollowing from './profileFollowings'\r\nimport ProfileEvent from './ProfileEvent'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default function  ProfileContent({profile}:props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhoto profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileEvent profile={profile} />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowing predicate={'followers'} />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowing predicate={'following'} />}\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid:true, vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data) => {profileStore.setActiveTab(data.activeIndex)}}\r\n            />\r\n    )\r\n}","import React from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader'\r\nimport ProfileContent from './ProfileContent'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\nexport default observer(function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, profile,loadingProfile,setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        return () => {setActiveTab(0);}\r\n    },[loadProfile,username,setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile...' />\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                <ProfileHeader profile={profile!} />\r\n                <ProfileContent profile={profile!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component,...rest}:Props){\r\n    const {userStore:{isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { Fragment } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './Navbar'\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage'\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { ToastContainer } from 'react-toastify';\nimport TestError from '../../features/errors/TestError'\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const  {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    commonStore.token ? userStore.getCurrentUser().finally(commonStore.setAppLoaded)\n    : commonStore.setAppLoaded();\n  },[commonStore,userStore]);\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading Activities' />\n\n  return (\n    <Fragment>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n              <Route path='/login' component={LoginForm} />\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute path='/testerror' component={TestError} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <Route path='/server-error' component={ServerError} />\n                <Route path='/profiles/:username' component={ProfilePage} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store'\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from '../src/app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}